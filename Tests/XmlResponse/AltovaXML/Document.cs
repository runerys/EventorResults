//
// Document.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Xml;
using Altova;

namespace Altova.Xml
{
	public class XmlException : AltovaException 
	{
		public XmlException(string text) :
			base( text )
		{
		}

		public XmlException(Exception other) 
			: base( other )
		{
		}
	}

	public abstract class Document
	{

		protected XmlDocument domDocument;
		protected System.Text.Encoding encoding = System.Text.Encoding.UTF8;
		protected string rootElementName	= null;
		protected string namespaceURI		= null;
		protected string schemaLocation		= null;
		protected string dtdLocation				=	null;

		public Document()
		{
		}


		public XmlDocument GetDomDocument()
		{
			if (domDocument == null)
				domDocument = new XmlDocument();
			return domDocument;
		}

		public XmlElement CreateRootElement(string namespaceURI, string name) 
		{
			if (dtdLocation != null && dtdLocation != "")
			{
				XmlDocumentType docType = GetDomDocument().CreateDocumentType(name,null, dtdLocation, null);
				domDocument.AppendChild(docType);
			}
			
			XmlElement rootElement = GetDomDocument().CreateElement(name, namespaceURI);
			domDocument.AppendChild(rootElement);
			
			if (domDocument.DocumentType == null)
				rootElement.SetAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
			if (schemaLocation != null && schemaLocation != "") {
				XmlAttribute a;
				if (namespaceURI == null || namespaceURI == "") {
					a = domDocument.CreateAttribute("xsi:noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance");
					a.Value = schemaLocation;
				} else {
					a = domDocument.CreateAttribute("xsi:schemaLocation", "http://www.w3.org/2001/XMLSchema-instance");
					a.Value = namespaceURI + " " + schemaLocation;
				}
				rootElement.SetAttributeNode(a);
			}
			return rootElement;
 		}

		public System.Text.Encoding Encoding
		{
			set
			{
				encoding = value;
			}
		}

		public void SetEncoding(string encoding)
		{
			encoding = encoding.ToUpper();
			if (encoding == "UTF-8")
				this.encoding = System.Text.Encoding.UTF8;
			else if (encoding == "UTF-16")
				this.encoding = System.Text.Encoding.Unicode;
			else if (encoding == "UTF-7")
				this.encoding = new System.Text.UTF7Encoding(true);
			else if (encoding == "US-ASCII")
				this.encoding = System.Text.Encoding.ASCII;
			else
			{
				try
				{
					this.encoding = System.Text.Encoding.GetEncoding( encoding );
				}
				catch( NotSupportedException )
				{
					throw new XmlException("Unknown encoding");
				}
			}
		}


		public void SetSchemaLocation(string schemaLocation)
		{
			this.schemaLocation = schemaLocation;
		}

		public void setDTDLocation(string dtdLocation) 
		{
			this.dtdLocation = dtdLocation;
		}

		public XmlNode Load(XmlReader reader)
		{
			XmlDocument doc = new XmlDocument();
			doc.Load(reader);
			return doc.DocumentElement;
		}

		public XmlNode Load(string filename)
		{
			XmlDocument doc = new XmlDocument();
			doc.Load(filename);
			return doc.DocumentElement;
		}

		public XmlNode LoadFromString(string xml)
		{
			XmlDocument doc = new XmlDocument();
			doc.LoadXml(xml);
			return doc.DocumentElement;
		}

		public void Save(string filename, Node node)
		{
			XmlTextWriter writer = new XmlTextWriter(filename, encoding);
			Save(writer, node);
			writer.Close();
		}

		public void Save(XmlWriter writer, Node node)
		{

			Node.InternalAdjustPrefix(node.domNode, true);
			node.AdjustPrefix();
			node.domNode.OwnerDocument.Save( writer );
		}

		public string SaveToString(Node node)
		{

			Node.InternalAdjustPrefix(node.domNode, true);
			node.AdjustPrefix();
			return node.domNode.OwnerDocument.InnerXml;
		}

		abstract protected internal void DeclareNamespaces(Node node);

		protected void DeclareNamespace(Node node, string prefix, string URI)
		{
			node.DeclareNamespace(prefix, URI);
		}


	}
}
