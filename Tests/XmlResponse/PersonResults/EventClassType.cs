//
// EventClassType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class EventClassType : Altova.Xml.Node
	{
		#region Forward constructors

		public EventClassType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public EventClassType(XmlNode node) : base(node) { SetCollectionParents(); }
		public EventClassType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public EventClassType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "lowAge" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "lowAge", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "sex" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "sex", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "numberInTeam" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "numberInTeam", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "teamEntry" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "teamEntry", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "numberOfLegs" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "numberOfLegs", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "numberOfVacancies" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "numberOfVacancies", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "maxNumberInClass" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "maxNumberInClass", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "divideClassMethod" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "divideClassMethod", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "actualForRanking" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "actualForRanking", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "timePresentation" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "timePresentation", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "totalResult" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "totalResult", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "normalizedClass" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "normalizedClass", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "numberOfPrizes" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "numberOfPrizes", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "allowEntryInAdvance" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "allowEntryInAdvance", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "sequence" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "sequence", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EventClassId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EventClassId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new NameType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ClassShortName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ClassShortName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EventClassStatus" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EventClassStatus", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new EventClassStatusType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EventId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EventId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ClassTypeId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ClassTypeId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "BaseClassId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "BaseClassId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ExternalId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ExternalId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ModifyDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ModifyDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ModifyDateType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ClassRaceInfo" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ClassRaceInfo", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ClassRaceInfoType(DOMNode).AdjustPrefix();
			}
		}



		#region lowAge accessor methods
		public static int GetlowAgeMinCount()
		{
			return 0;
		}

		public static int lowAgeMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetlowAgeMaxCount()
		{
			return 1;
		}

		public static int lowAgeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetlowAgeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "lowAge");
		}

		public int lowAgeCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "lowAge");
			}
		}

		public bool HaslowAge()
		{
			return HasDomChild(NodeType.Attribute, "", "lowAge");
		}

		public lowAgeType NewlowAge()
		{
			return new lowAgeType();
		}

		public lowAgeType GetlowAgeAt(int index)
		{
			return new lowAgeType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "lowAge", index)));
		}

		public XmlNode GetStartinglowAgeCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "lowAge" );
		}

		public XmlNode GetAdvancedlowAgeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "lowAge", curNode );
		}

		public lowAgeType GetlowAgeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new lowAgeType( curNode.Value );
		}


		public lowAgeType GetlowAge()
		{
			return GetlowAgeAt(0);
		}

		public lowAgeType lowAge
		{
			get
			{
				return GetlowAgeAt(0);
			}
		}

		public void RemovelowAgeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "lowAge", index);
		}

		public void RemovelowAge()
		{
			while (HaslowAge())
				RemovelowAgeAt(0);
		}

		public void AddlowAge(lowAgeType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "lowAge", newValue.ToString());
		}

		public void InsertlowAgeAt(lowAgeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "lowAge", index, newValue.ToString());
		}

		public void ReplacelowAgeAt(lowAgeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "lowAge", index, newValue.ToString());
		}
		#endregion // lowAge accessor methods

		#region lowAge collection
        public lowAgeCollection	MylowAges = new lowAgeCollection( );

        public class lowAgeCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public lowAgeEnumerator GetEnumerator() 
			{
				return new lowAgeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class lowAgeEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public lowAgeEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.lowAgeCount );
			}
			public lowAgeType  Current 
			{
				get 
				{
					return(parent.GetlowAgeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // lowAge collection

		#region sex accessor methods
		public static int GetsexMinCount()
		{
			return 1;
		}

		public static int sexMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetsexMaxCount()
		{
			return 1;
		}

		public static int sexMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetsexCount()
		{
			return DomChildCount(NodeType.Attribute, "", "sex");
		}

		public int sexCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "sex");
			}
		}

		public bool Hassex()
		{
			return HasDomChild(NodeType.Attribute, "", "sex");
		}

		public sexType Newsex()
		{
			return new sexType();
		}

		public sexType GetsexAt(int index)
		{
			return new sexType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "sex", index)));
		}

		public XmlNode GetStartingsexCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "sex" );
		}

		public XmlNode GetAdvancedsexCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "sex", curNode );
		}

		public sexType GetsexValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new sexType( curNode.Value );
		}


		public sexType Getsex()
		{
			return GetsexAt(0);
		}

		public sexType sex
		{
			get
			{
				return GetsexAt(0);
			}
		}

		public void RemovesexAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "sex", index);
		}

		public void Removesex()
		{
			while (Hassex())
				RemovesexAt(0);
		}

		public void Addsex(sexType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "sex", newValue.ToString());
		}

		public void InsertsexAt(sexType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "sex", index, newValue.ToString());
		}

		public void ReplacesexAt(sexType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "sex", index, newValue.ToString());
		}
		#endregion // sex accessor methods

		#region sex collection
        public sexCollection	Mysexs = new sexCollection( );

        public class sexCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public sexEnumerator GetEnumerator() 
			{
				return new sexEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class sexEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public sexEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.sexCount );
			}
			public sexType  Current 
			{
				get 
				{
					return(parent.GetsexAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // sex collection

		#region numberInTeam accessor methods
		public static int GetnumberInTeamMinCount()
		{
			return 1;
		}

		public static int numberInTeamMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnumberInTeamMaxCount()
		{
			return 1;
		}

		public static int numberInTeamMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnumberInTeamCount()
		{
			return DomChildCount(NodeType.Attribute, "", "numberInTeam");
		}

		public int numberInTeamCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "numberInTeam");
			}
		}

		public bool HasnumberInTeam()
		{
			return HasDomChild(NodeType.Attribute, "", "numberInTeam");
		}

		public numberInTeamType NewnumberInTeam()
		{
			return new numberInTeamType();
		}

		public numberInTeamType GetnumberInTeamAt(int index)
		{
			return new numberInTeamType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "numberInTeam", index)));
		}

		public XmlNode GetStartingnumberInTeamCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "numberInTeam" );
		}

		public XmlNode GetAdvancednumberInTeamCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "numberInTeam", curNode );
		}

		public numberInTeamType GetnumberInTeamValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new numberInTeamType( curNode.Value );
		}


		public numberInTeamType GetnumberInTeam()
		{
			return GetnumberInTeamAt(0);
		}

		public numberInTeamType numberInTeam
		{
			get
			{
				return GetnumberInTeamAt(0);
			}
		}

		public void RemovenumberInTeamAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "numberInTeam", index);
		}

		public void RemovenumberInTeam()
		{
			while (HasnumberInTeam())
				RemovenumberInTeamAt(0);
		}

		public void AddnumberInTeam(numberInTeamType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "numberInTeam", newValue.ToString());
		}

		public void InsertnumberInTeamAt(numberInTeamType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "numberInTeam", index, newValue.ToString());
		}

		public void ReplacenumberInTeamAt(numberInTeamType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "numberInTeam", index, newValue.ToString());
		}
		#endregion // numberInTeam accessor methods

		#region numberInTeam collection
        public numberInTeamCollection	MynumberInTeams = new numberInTeamCollection( );

        public class numberInTeamCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public numberInTeamEnumerator GetEnumerator() 
			{
				return new numberInTeamEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class numberInTeamEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public numberInTeamEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.numberInTeamCount );
			}
			public numberInTeamType  Current 
			{
				get 
				{
					return(parent.GetnumberInTeamAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // numberInTeam collection

		#region teamEntry accessor methods
		public static int GetteamEntryMinCount()
		{
			return 1;
		}

		public static int teamEntryMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetteamEntryMaxCount()
		{
			return 1;
		}

		public static int teamEntryMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetteamEntryCount()
		{
			return DomChildCount(NodeType.Attribute, "", "teamEntry");
		}

		public int teamEntryCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "teamEntry");
			}
		}

		public bool HasteamEntry()
		{
			return HasDomChild(NodeType.Attribute, "", "teamEntry");
		}

		public teamEntryType NewteamEntry()
		{
			return new teamEntryType();
		}

		public teamEntryType GetteamEntryAt(int index)
		{
			return new teamEntryType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "teamEntry", index)));
		}

		public XmlNode GetStartingteamEntryCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "teamEntry" );
		}

		public XmlNode GetAdvancedteamEntryCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "teamEntry", curNode );
		}

		public teamEntryType GetteamEntryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new teamEntryType( curNode.Value );
		}


		public teamEntryType GetteamEntry()
		{
			return GetteamEntryAt(0);
		}

		public teamEntryType teamEntry
		{
			get
			{
				return GetteamEntryAt(0);
			}
		}

		public void RemoveteamEntryAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "teamEntry", index);
		}

		public void RemoveteamEntry()
		{
			while (HasteamEntry())
				RemoveteamEntryAt(0);
		}

		public void AddteamEntry(teamEntryType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "teamEntry", newValue.ToString());
		}

		public void InsertteamEntryAt(teamEntryType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "teamEntry", index, newValue.ToString());
		}

		public void ReplaceteamEntryAt(teamEntryType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "teamEntry", index, newValue.ToString());
		}
		#endregion // teamEntry accessor methods

		#region teamEntry collection
        public teamEntryCollection	MyteamEntrys = new teamEntryCollection( );

        public class teamEntryCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public teamEntryEnumerator GetEnumerator() 
			{
				return new teamEntryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class teamEntryEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public teamEntryEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.teamEntryCount );
			}
			public teamEntryType  Current 
			{
				get 
				{
					return(parent.GetteamEntryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // teamEntry collection

		#region numberOfLegs accessor methods
		public static int GetnumberOfLegsMinCount()
		{
			return 1;
		}

		public static int numberOfLegsMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnumberOfLegsMaxCount()
		{
			return 1;
		}

		public static int numberOfLegsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnumberOfLegsCount()
		{
			return DomChildCount(NodeType.Attribute, "", "numberOfLegs");
		}

		public int numberOfLegsCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "numberOfLegs");
			}
		}

		public bool HasnumberOfLegs()
		{
			return HasDomChild(NodeType.Attribute, "", "numberOfLegs");
		}

		public numberOfLegsType NewnumberOfLegs()
		{
			return new numberOfLegsType();
		}

		public numberOfLegsType GetnumberOfLegsAt(int index)
		{
			return new numberOfLegsType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "numberOfLegs", index)));
		}

		public XmlNode GetStartingnumberOfLegsCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "numberOfLegs" );
		}

		public XmlNode GetAdvancednumberOfLegsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "numberOfLegs", curNode );
		}

		public numberOfLegsType GetnumberOfLegsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new numberOfLegsType( curNode.Value );
		}


		public numberOfLegsType GetnumberOfLegs()
		{
			return GetnumberOfLegsAt(0);
		}

		public numberOfLegsType numberOfLegs
		{
			get
			{
				return GetnumberOfLegsAt(0);
			}
		}

		public void RemovenumberOfLegsAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "numberOfLegs", index);
		}

		public void RemovenumberOfLegs()
		{
			while (HasnumberOfLegs())
				RemovenumberOfLegsAt(0);
		}

		public void AddnumberOfLegs(numberOfLegsType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "numberOfLegs", newValue.ToString());
		}

		public void InsertnumberOfLegsAt(numberOfLegsType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "numberOfLegs", index, newValue.ToString());
		}

		public void ReplacenumberOfLegsAt(numberOfLegsType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "numberOfLegs", index, newValue.ToString());
		}
		#endregion // numberOfLegs accessor methods

		#region numberOfLegs collection
        public numberOfLegsCollection	MynumberOfLegss = new numberOfLegsCollection( );

        public class numberOfLegsCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public numberOfLegsEnumerator GetEnumerator() 
			{
				return new numberOfLegsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class numberOfLegsEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public numberOfLegsEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.numberOfLegsCount );
			}
			public numberOfLegsType  Current 
			{
				get 
				{
					return(parent.GetnumberOfLegsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // numberOfLegs collection

		#region numberOfVacancies accessor methods
		public static int GetnumberOfVacanciesMinCount()
		{
			return 1;
		}

		public static int numberOfVacanciesMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnumberOfVacanciesMaxCount()
		{
			return 1;
		}

		public static int numberOfVacanciesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnumberOfVacanciesCount()
		{
			return DomChildCount(NodeType.Attribute, "", "numberOfVacancies");
		}

		public int numberOfVacanciesCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "numberOfVacancies");
			}
		}

		public bool HasnumberOfVacancies()
		{
			return HasDomChild(NodeType.Attribute, "", "numberOfVacancies");
		}

		public numberOfVacanciesType NewnumberOfVacancies()
		{
			return new numberOfVacanciesType();
		}

		public numberOfVacanciesType GetnumberOfVacanciesAt(int index)
		{
			return new numberOfVacanciesType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "numberOfVacancies", index)));
		}

		public XmlNode GetStartingnumberOfVacanciesCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "numberOfVacancies" );
		}

		public XmlNode GetAdvancednumberOfVacanciesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "numberOfVacancies", curNode );
		}

		public numberOfVacanciesType GetnumberOfVacanciesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new numberOfVacanciesType( curNode.Value );
		}


		public numberOfVacanciesType GetnumberOfVacancies()
		{
			return GetnumberOfVacanciesAt(0);
		}

		public numberOfVacanciesType numberOfVacancies
		{
			get
			{
				return GetnumberOfVacanciesAt(0);
			}
		}

		public void RemovenumberOfVacanciesAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "numberOfVacancies", index);
		}

		public void RemovenumberOfVacancies()
		{
			while (HasnumberOfVacancies())
				RemovenumberOfVacanciesAt(0);
		}

		public void AddnumberOfVacancies(numberOfVacanciesType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "numberOfVacancies", newValue.ToString());
		}

		public void InsertnumberOfVacanciesAt(numberOfVacanciesType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "numberOfVacancies", index, newValue.ToString());
		}

		public void ReplacenumberOfVacanciesAt(numberOfVacanciesType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "numberOfVacancies", index, newValue.ToString());
		}
		#endregion // numberOfVacancies accessor methods

		#region numberOfVacancies collection
        public numberOfVacanciesCollection	MynumberOfVacanciess = new numberOfVacanciesCollection( );

        public class numberOfVacanciesCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public numberOfVacanciesEnumerator GetEnumerator() 
			{
				return new numberOfVacanciesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class numberOfVacanciesEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public numberOfVacanciesEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.numberOfVacanciesCount );
			}
			public numberOfVacanciesType  Current 
			{
				get 
				{
					return(parent.GetnumberOfVacanciesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // numberOfVacancies collection

		#region maxNumberInClass accessor methods
		public static int GetmaxNumberInClassMinCount()
		{
			return 1;
		}

		public static int maxNumberInClassMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetmaxNumberInClassMaxCount()
		{
			return 1;
		}

		public static int maxNumberInClassMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetmaxNumberInClassCount()
		{
			return DomChildCount(NodeType.Attribute, "", "maxNumberInClass");
		}

		public int maxNumberInClassCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "maxNumberInClass");
			}
		}

		public bool HasmaxNumberInClass()
		{
			return HasDomChild(NodeType.Attribute, "", "maxNumberInClass");
		}

		public maxNumberInClassType NewmaxNumberInClass()
		{
			return new maxNumberInClassType();
		}

		public maxNumberInClassType GetmaxNumberInClassAt(int index)
		{
			return new maxNumberInClassType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "maxNumberInClass", index)));
		}

		public XmlNode GetStartingmaxNumberInClassCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "maxNumberInClass" );
		}

		public XmlNode GetAdvancedmaxNumberInClassCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "maxNumberInClass", curNode );
		}

		public maxNumberInClassType GetmaxNumberInClassValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new maxNumberInClassType( curNode.Value );
		}


		public maxNumberInClassType GetmaxNumberInClass()
		{
			return GetmaxNumberInClassAt(0);
		}

		public maxNumberInClassType maxNumberInClass
		{
			get
			{
				return GetmaxNumberInClassAt(0);
			}
		}

		public void RemovemaxNumberInClassAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "maxNumberInClass", index);
		}

		public void RemovemaxNumberInClass()
		{
			while (HasmaxNumberInClass())
				RemovemaxNumberInClassAt(0);
		}

		public void AddmaxNumberInClass(maxNumberInClassType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "maxNumberInClass", newValue.ToString());
		}

		public void InsertmaxNumberInClassAt(maxNumberInClassType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "maxNumberInClass", index, newValue.ToString());
		}

		public void ReplacemaxNumberInClassAt(maxNumberInClassType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "maxNumberInClass", index, newValue.ToString());
		}
		#endregion // maxNumberInClass accessor methods

		#region maxNumberInClass collection
        public maxNumberInClassCollection	MymaxNumberInClasss = new maxNumberInClassCollection( );

        public class maxNumberInClassCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public maxNumberInClassEnumerator GetEnumerator() 
			{
				return new maxNumberInClassEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class maxNumberInClassEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public maxNumberInClassEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.maxNumberInClassCount );
			}
			public maxNumberInClassType  Current 
			{
				get 
				{
					return(parent.GetmaxNumberInClassAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // maxNumberInClass collection

		#region divideClassMethod accessor methods
		public static int GetdivideClassMethodMinCount()
		{
			return 1;
		}

		public static int divideClassMethodMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetdivideClassMethodMaxCount()
		{
			return 1;
		}

		public static int divideClassMethodMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdivideClassMethodCount()
		{
			return DomChildCount(NodeType.Attribute, "", "divideClassMethod");
		}

		public int divideClassMethodCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "divideClassMethod");
			}
		}

		public bool HasdivideClassMethod()
		{
			return HasDomChild(NodeType.Attribute, "", "divideClassMethod");
		}

		public divideClassMethodType NewdivideClassMethod()
		{
			return new divideClassMethodType();
		}

		public divideClassMethodType GetdivideClassMethodAt(int index)
		{
			return new divideClassMethodType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "divideClassMethod", index)));
		}

		public XmlNode GetStartingdivideClassMethodCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "divideClassMethod" );
		}

		public XmlNode GetAdvanceddivideClassMethodCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "divideClassMethod", curNode );
		}

		public divideClassMethodType GetdivideClassMethodValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new divideClassMethodType( curNode.Value );
		}


		public divideClassMethodType GetdivideClassMethod()
		{
			return GetdivideClassMethodAt(0);
		}

		public divideClassMethodType divideClassMethod
		{
			get
			{
				return GetdivideClassMethodAt(0);
			}
		}

		public void RemovedivideClassMethodAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "divideClassMethod", index);
		}

		public void RemovedivideClassMethod()
		{
			while (HasdivideClassMethod())
				RemovedivideClassMethodAt(0);
		}

		public void AdddivideClassMethod(divideClassMethodType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "divideClassMethod", newValue.ToString());
		}

		public void InsertdivideClassMethodAt(divideClassMethodType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "divideClassMethod", index, newValue.ToString());
		}

		public void ReplacedivideClassMethodAt(divideClassMethodType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "divideClassMethod", index, newValue.ToString());
		}
		#endregion // divideClassMethod accessor methods

		#region divideClassMethod collection
        public divideClassMethodCollection	MydivideClassMethods = new divideClassMethodCollection( );

        public class divideClassMethodCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public divideClassMethodEnumerator GetEnumerator() 
			{
				return new divideClassMethodEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class divideClassMethodEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public divideClassMethodEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.divideClassMethodCount );
			}
			public divideClassMethodType  Current 
			{
				get 
				{
					return(parent.GetdivideClassMethodAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // divideClassMethod collection

		#region actualForRanking accessor methods
		public static int GetactualForRankingMinCount()
		{
			return 1;
		}

		public static int actualForRankingMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetactualForRankingMaxCount()
		{
			return 1;
		}

		public static int actualForRankingMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetactualForRankingCount()
		{
			return DomChildCount(NodeType.Attribute, "", "actualForRanking");
		}

		public int actualForRankingCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "actualForRanking");
			}
		}

		public bool HasactualForRanking()
		{
			return HasDomChild(NodeType.Attribute, "", "actualForRanking");
		}

		public actualForRankingType NewactualForRanking()
		{
			return new actualForRankingType();
		}

		public actualForRankingType GetactualForRankingAt(int index)
		{
			return new actualForRankingType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "actualForRanking", index)));
		}

		public XmlNode GetStartingactualForRankingCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "actualForRanking" );
		}

		public XmlNode GetAdvancedactualForRankingCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "actualForRanking", curNode );
		}

		public actualForRankingType GetactualForRankingValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new actualForRankingType( curNode.Value );
		}


		public actualForRankingType GetactualForRanking()
		{
			return GetactualForRankingAt(0);
		}

		public actualForRankingType actualForRanking
		{
			get
			{
				return GetactualForRankingAt(0);
			}
		}

		public void RemoveactualForRankingAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "actualForRanking", index);
		}

		public void RemoveactualForRanking()
		{
			while (HasactualForRanking())
				RemoveactualForRankingAt(0);
		}

		public void AddactualForRanking(actualForRankingType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "actualForRanking", newValue.ToString());
		}

		public void InsertactualForRankingAt(actualForRankingType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "actualForRanking", index, newValue.ToString());
		}

		public void ReplaceactualForRankingAt(actualForRankingType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "actualForRanking", index, newValue.ToString());
		}
		#endregion // actualForRanking accessor methods

		#region actualForRanking collection
        public actualForRankingCollection	MyactualForRankings = new actualForRankingCollection( );

        public class actualForRankingCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public actualForRankingEnumerator GetEnumerator() 
			{
				return new actualForRankingEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class actualForRankingEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public actualForRankingEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.actualForRankingCount );
			}
			public actualForRankingType  Current 
			{
				get 
				{
					return(parent.GetactualForRankingAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // actualForRanking collection

		#region timePresentation accessor methods
		public static int GettimePresentationMinCount()
		{
			return 1;
		}

		public static int timePresentationMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GettimePresentationMaxCount()
		{
			return 1;
		}

		public static int timePresentationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettimePresentationCount()
		{
			return DomChildCount(NodeType.Attribute, "", "timePresentation");
		}

		public int timePresentationCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "timePresentation");
			}
		}

		public bool HastimePresentation()
		{
			return HasDomChild(NodeType.Attribute, "", "timePresentation");
		}

		public timePresentationType NewtimePresentation()
		{
			return new timePresentationType();
		}

		public timePresentationType GettimePresentationAt(int index)
		{
			return new timePresentationType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "timePresentation", index)));
		}

		public XmlNode GetStartingtimePresentationCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "timePresentation" );
		}

		public XmlNode GetAdvancedtimePresentationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "timePresentation", curNode );
		}

		public timePresentationType GettimePresentationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new timePresentationType( curNode.Value );
		}


		public timePresentationType GettimePresentation()
		{
			return GettimePresentationAt(0);
		}

		public timePresentationType timePresentation
		{
			get
			{
				return GettimePresentationAt(0);
			}
		}

		public void RemovetimePresentationAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "timePresentation", index);
		}

		public void RemovetimePresentation()
		{
			while (HastimePresentation())
				RemovetimePresentationAt(0);
		}

		public void AddtimePresentation(timePresentationType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "timePresentation", newValue.ToString());
		}

		public void InserttimePresentationAt(timePresentationType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "timePresentation", index, newValue.ToString());
		}

		public void ReplacetimePresentationAt(timePresentationType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "timePresentation", index, newValue.ToString());
		}
		#endregion // timePresentation accessor methods

		#region timePresentation collection
        public timePresentationCollection	MytimePresentations = new timePresentationCollection( );

        public class timePresentationCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public timePresentationEnumerator GetEnumerator() 
			{
				return new timePresentationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class timePresentationEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public timePresentationEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.timePresentationCount );
			}
			public timePresentationType  Current 
			{
				get 
				{
					return(parent.GettimePresentationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // timePresentation collection

		#region totalResult accessor methods
		public static int GettotalResultMinCount()
		{
			return 1;
		}

		public static int totalResultMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GettotalResultMaxCount()
		{
			return 1;
		}

		public static int totalResultMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettotalResultCount()
		{
			return DomChildCount(NodeType.Attribute, "", "totalResult");
		}

		public int totalResultCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "totalResult");
			}
		}

		public bool HastotalResult()
		{
			return HasDomChild(NodeType.Attribute, "", "totalResult");
		}

		public totalResultType NewtotalResult()
		{
			return new totalResultType();
		}

		public totalResultType GettotalResultAt(int index)
		{
			return new totalResultType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "totalResult", index)));
		}

		public XmlNode GetStartingtotalResultCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "totalResult" );
		}

		public XmlNode GetAdvancedtotalResultCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "totalResult", curNode );
		}

		public totalResultType GettotalResultValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new totalResultType( curNode.Value );
		}


		public totalResultType GettotalResult()
		{
			return GettotalResultAt(0);
		}

		public totalResultType totalResult
		{
			get
			{
				return GettotalResultAt(0);
			}
		}

		public void RemovetotalResultAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "totalResult", index);
		}

		public void RemovetotalResult()
		{
			while (HastotalResult())
				RemovetotalResultAt(0);
		}

		public void AddtotalResult(totalResultType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "totalResult", newValue.ToString());
		}

		public void InserttotalResultAt(totalResultType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "totalResult", index, newValue.ToString());
		}

		public void ReplacetotalResultAt(totalResultType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "totalResult", index, newValue.ToString());
		}
		#endregion // totalResult accessor methods

		#region totalResult collection
        public totalResultCollection	MytotalResults = new totalResultCollection( );

        public class totalResultCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public totalResultEnumerator GetEnumerator() 
			{
				return new totalResultEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class totalResultEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public totalResultEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.totalResultCount );
			}
			public totalResultType  Current 
			{
				get 
				{
					return(parent.GettotalResultAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // totalResult collection

		#region normalizedClass accessor methods
		public static int GetnormalizedClassMinCount()
		{
			return 1;
		}

		public static int normalizedClassMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnormalizedClassMaxCount()
		{
			return 1;
		}

		public static int normalizedClassMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnormalizedClassCount()
		{
			return DomChildCount(NodeType.Attribute, "", "normalizedClass");
		}

		public int normalizedClassCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "normalizedClass");
			}
		}

		public bool HasnormalizedClass()
		{
			return HasDomChild(NodeType.Attribute, "", "normalizedClass");
		}

		public normalizedClassType NewnormalizedClass()
		{
			return new normalizedClassType();
		}

		public normalizedClassType GetnormalizedClassAt(int index)
		{
			return new normalizedClassType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "normalizedClass", index)));
		}

		public XmlNode GetStartingnormalizedClassCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "normalizedClass" );
		}

		public XmlNode GetAdvancednormalizedClassCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "normalizedClass", curNode );
		}

		public normalizedClassType GetnormalizedClassValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new normalizedClassType( curNode.Value );
		}


		public normalizedClassType GetnormalizedClass()
		{
			return GetnormalizedClassAt(0);
		}

		public normalizedClassType normalizedClass
		{
			get
			{
				return GetnormalizedClassAt(0);
			}
		}

		public void RemovenormalizedClassAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "normalizedClass", index);
		}

		public void RemovenormalizedClass()
		{
			while (HasnormalizedClass())
				RemovenormalizedClassAt(0);
		}

		public void AddnormalizedClass(normalizedClassType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "normalizedClass", newValue.ToString());
		}

		public void InsertnormalizedClassAt(normalizedClassType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "normalizedClass", index, newValue.ToString());
		}

		public void ReplacenormalizedClassAt(normalizedClassType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "normalizedClass", index, newValue.ToString());
		}
		#endregion // normalizedClass accessor methods

		#region normalizedClass collection
        public normalizedClassCollection	MynormalizedClasss = new normalizedClassCollection( );

        public class normalizedClassCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public normalizedClassEnumerator GetEnumerator() 
			{
				return new normalizedClassEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class normalizedClassEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public normalizedClassEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.normalizedClassCount );
			}
			public normalizedClassType  Current 
			{
				get 
				{
					return(parent.GetnormalizedClassAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // normalizedClass collection

		#region numberOfPrizes accessor methods
		public static int GetnumberOfPrizesMinCount()
		{
			return 1;
		}

		public static int numberOfPrizesMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnumberOfPrizesMaxCount()
		{
			return 1;
		}

		public static int numberOfPrizesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnumberOfPrizesCount()
		{
			return DomChildCount(NodeType.Attribute, "", "numberOfPrizes");
		}

		public int numberOfPrizesCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "numberOfPrizes");
			}
		}

		public bool HasnumberOfPrizes()
		{
			return HasDomChild(NodeType.Attribute, "", "numberOfPrizes");
		}

		public numberOfPrizesType NewnumberOfPrizes()
		{
			return new numberOfPrizesType();
		}

		public numberOfPrizesType GetnumberOfPrizesAt(int index)
		{
			return new numberOfPrizesType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "numberOfPrizes", index)));
		}

		public XmlNode GetStartingnumberOfPrizesCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "numberOfPrizes" );
		}

		public XmlNode GetAdvancednumberOfPrizesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "numberOfPrizes", curNode );
		}

		public numberOfPrizesType GetnumberOfPrizesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new numberOfPrizesType( curNode.Value );
		}


		public numberOfPrizesType GetnumberOfPrizes()
		{
			return GetnumberOfPrizesAt(0);
		}

		public numberOfPrizesType numberOfPrizes
		{
			get
			{
				return GetnumberOfPrizesAt(0);
			}
		}

		public void RemovenumberOfPrizesAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "numberOfPrizes", index);
		}

		public void RemovenumberOfPrizes()
		{
			while (HasnumberOfPrizes())
				RemovenumberOfPrizesAt(0);
		}

		public void AddnumberOfPrizes(numberOfPrizesType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "numberOfPrizes", newValue.ToString());
		}

		public void InsertnumberOfPrizesAt(numberOfPrizesType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "numberOfPrizes", index, newValue.ToString());
		}

		public void ReplacenumberOfPrizesAt(numberOfPrizesType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "numberOfPrizes", index, newValue.ToString());
		}
		#endregion // numberOfPrizes accessor methods

		#region numberOfPrizes collection
        public numberOfPrizesCollection	MynumberOfPrizess = new numberOfPrizesCollection( );

        public class numberOfPrizesCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public numberOfPrizesEnumerator GetEnumerator() 
			{
				return new numberOfPrizesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class numberOfPrizesEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public numberOfPrizesEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.numberOfPrizesCount );
			}
			public numberOfPrizesType  Current 
			{
				get 
				{
					return(parent.GetnumberOfPrizesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // numberOfPrizes collection

		#region allowEntryInAdvance accessor methods
		public static int GetallowEntryInAdvanceMinCount()
		{
			return 1;
		}

		public static int allowEntryInAdvanceMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetallowEntryInAdvanceMaxCount()
		{
			return 1;
		}

		public static int allowEntryInAdvanceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetallowEntryInAdvanceCount()
		{
			return DomChildCount(NodeType.Attribute, "", "allowEntryInAdvance");
		}

		public int allowEntryInAdvanceCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "allowEntryInAdvance");
			}
		}

		public bool HasallowEntryInAdvance()
		{
			return HasDomChild(NodeType.Attribute, "", "allowEntryInAdvance");
		}

		public allowEntryInAdvanceType NewallowEntryInAdvance()
		{
			return new allowEntryInAdvanceType();
		}

		public allowEntryInAdvanceType GetallowEntryInAdvanceAt(int index)
		{
			return new allowEntryInAdvanceType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "allowEntryInAdvance", index)));
		}

		public XmlNode GetStartingallowEntryInAdvanceCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "allowEntryInAdvance" );
		}

		public XmlNode GetAdvancedallowEntryInAdvanceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "allowEntryInAdvance", curNode );
		}

		public allowEntryInAdvanceType GetallowEntryInAdvanceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new allowEntryInAdvanceType( curNode.Value );
		}


		public allowEntryInAdvanceType GetallowEntryInAdvance()
		{
			return GetallowEntryInAdvanceAt(0);
		}

		public allowEntryInAdvanceType allowEntryInAdvance
		{
			get
			{
				return GetallowEntryInAdvanceAt(0);
			}
		}

		public void RemoveallowEntryInAdvanceAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "allowEntryInAdvance", index);
		}

		public void RemoveallowEntryInAdvance()
		{
			while (HasallowEntryInAdvance())
				RemoveallowEntryInAdvanceAt(0);
		}

		public void AddallowEntryInAdvance(allowEntryInAdvanceType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "allowEntryInAdvance", newValue.ToString());
		}

		public void InsertallowEntryInAdvanceAt(allowEntryInAdvanceType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "allowEntryInAdvance", index, newValue.ToString());
		}

		public void ReplaceallowEntryInAdvanceAt(allowEntryInAdvanceType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "allowEntryInAdvance", index, newValue.ToString());
		}
		#endregion // allowEntryInAdvance accessor methods

		#region allowEntryInAdvance collection
        public allowEntryInAdvanceCollection	MyallowEntryInAdvances = new allowEntryInAdvanceCollection( );

        public class allowEntryInAdvanceCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public allowEntryInAdvanceEnumerator GetEnumerator() 
			{
				return new allowEntryInAdvanceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class allowEntryInAdvanceEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public allowEntryInAdvanceEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.allowEntryInAdvanceCount );
			}
			public allowEntryInAdvanceType  Current 
			{
				get 
				{
					return(parent.GetallowEntryInAdvanceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // allowEntryInAdvance collection

		#region sequence accessor methods
		public static int GetsequenceMinCount()
		{
			return 0;
		}

		public static int sequenceMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetsequenceMaxCount()
		{
			return 1;
		}

		public static int sequenceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetsequenceCount()
		{
			return DomChildCount(NodeType.Attribute, "", "sequence");
		}

		public int sequenceCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "sequence");
			}
		}

		public bool Hassequence()
		{
			return HasDomChild(NodeType.Attribute, "", "sequence");
		}

		public sequenceType Newsequence()
		{
			return new sequenceType();
		}

		public sequenceType GetsequenceAt(int index)
		{
			return new sequenceType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "sequence", index)));
		}

		public XmlNode GetStartingsequenceCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "sequence" );
		}

		public XmlNode GetAdvancedsequenceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "sequence", curNode );
		}

		public sequenceType GetsequenceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new sequenceType( curNode.Value );
		}


		public sequenceType Getsequence()
		{
			return GetsequenceAt(0);
		}

		public sequenceType sequence
		{
			get
			{
				return GetsequenceAt(0);
			}
		}

		public void RemovesequenceAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "sequence", index);
		}

		public void Removesequence()
		{
			while (Hassequence())
				RemovesequenceAt(0);
		}

		public void Addsequence(sequenceType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "sequence", newValue.ToString());
		}

		public void InsertsequenceAt(sequenceType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "sequence", index, newValue.ToString());
		}

		public void ReplacesequenceAt(sequenceType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "sequence", index, newValue.ToString());
		}
		#endregion // sequence accessor methods

		#region sequence collection
        public sequenceCollection	Mysequences = new sequenceCollection( );

        public class sequenceCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public sequenceEnumerator GetEnumerator() 
			{
				return new sequenceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class sequenceEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public sequenceEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.sequenceCount );
			}
			public sequenceType  Current 
			{
				get 
				{
					return(parent.GetsequenceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // sequence collection

		#region EventClassId accessor methods
		public static int GetEventClassIdMinCount()
		{
			return 1;
		}

		public static int EventClassIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEventClassIdMaxCount()
		{
			return 1;
		}

		public static int EventClassIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEventClassIdCount()
		{
			return DomChildCount(NodeType.Element, "", "EventClassId");
		}

		public int EventClassIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EventClassId");
			}
		}

		public bool HasEventClassId()
		{
			return HasDomChild(NodeType.Element, "", "EventClassId");
		}

		public EventClassIdType NewEventClassId()
		{
			return new EventClassIdType();
		}

		public EventClassIdType GetEventClassIdAt(int index)
		{
			return new EventClassIdType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "EventClassId", index)));
		}

		public XmlNode GetStartingEventClassIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EventClassId" );
		}

		public XmlNode GetAdvancedEventClassIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EventClassId", curNode );
		}

		public EventClassIdType GetEventClassIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EventClassIdType( curNode.InnerText );
		}


		public EventClassIdType GetEventClassId()
		{
			return GetEventClassIdAt(0);
		}

		public EventClassIdType EventClassId
		{
			get
			{
				return GetEventClassIdAt(0);
			}
		}

		public void RemoveEventClassIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EventClassId", index);
		}

		public void RemoveEventClassId()
		{
			while (HasEventClassId())
				RemoveEventClassIdAt(0);
		}

		public void AddEventClassId(EventClassIdType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "EventClassId", newValue.ToString());
		}

		public void InsertEventClassIdAt(EventClassIdType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "EventClassId", index, newValue.ToString());
		}

		public void ReplaceEventClassIdAt(EventClassIdType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "EventClassId", index, newValue.ToString());
		}
		#endregion // EventClassId accessor methods

		#region EventClassId collection
        public EventClassIdCollection	MyEventClassIds = new EventClassIdCollection( );

        public class EventClassIdCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EventClassIdEnumerator GetEnumerator() 
			{
				return new EventClassIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EventClassIdEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public EventClassIdEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EventClassIdCount );
			}
			public EventClassIdType  Current 
			{
				get 
				{
					return(parent.GetEventClassIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EventClassId collection

		#region Name accessor methods
		public static int GetNameMinCount()
		{
			return 1;
		}

		public static int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNameMaxCount()
		{
			return 1;
		}

		public static int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "", "Name");
		}

		public NameType NewName()
		{
			return new NameType(domNode.OwnerDocument.CreateElement("Name", ""));
		}

		public NameType GetNameAt(int index)
		{
			return new NameType(GetDomChildAt(NodeType.Element, "", "Name", index));
		}

		public XmlNode GetStartingNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Name", curNode );
		}

		public NameType GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new NameType( curNode );
		}


		public NameType GetName()
		{
			return GetNameAt(0);
		}

		public NameType Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Name", index);
		}

		public void RemoveName()
		{
			while (HasName())
				RemoveNameAt(0);
		}

		public void AddName(NameType newValue)
		{
			AppendDomElement("", "Name", newValue);
		}

		public void InsertNameAt(NameType newValue, int index)
		{
			InsertDomElementAt("", "Name", index, newValue);
		}

		public void ReplaceNameAt(NameType newValue, int index)
		{
			ReplaceDomElementAt("", "Name", index, newValue);
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public NameEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public NameType  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region ClassShortName accessor methods
		public static int GetClassShortNameMinCount()
		{
			return 1;
		}

		public static int ClassShortNameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetClassShortNameMaxCount()
		{
			return 1;
		}

		public static int ClassShortNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetClassShortNameCount()
		{
			return DomChildCount(NodeType.Element, "", "ClassShortName");
		}

		public int ClassShortNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ClassShortName");
			}
		}

		public bool HasClassShortName()
		{
			return HasDomChild(NodeType.Element, "", "ClassShortName");
		}

		public ClassShortNameType NewClassShortName()
		{
			return new ClassShortNameType();
		}

		public ClassShortNameType GetClassShortNameAt(int index)
		{
			return new ClassShortNameType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ClassShortName", index)));
		}

		public XmlNode GetStartingClassShortNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ClassShortName" );
		}

		public XmlNode GetAdvancedClassShortNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ClassShortName", curNode );
		}

		public ClassShortNameType GetClassShortNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ClassShortNameType( curNode.InnerText );
		}


		public ClassShortNameType GetClassShortName()
		{
			return GetClassShortNameAt(0);
		}

		public ClassShortNameType ClassShortName
		{
			get
			{
				return GetClassShortNameAt(0);
			}
		}

		public void RemoveClassShortNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ClassShortName", index);
		}

		public void RemoveClassShortName()
		{
			while (HasClassShortName())
				RemoveClassShortNameAt(0);
		}

		public void AddClassShortName(ClassShortNameType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "ClassShortName", newValue.ToString());
		}

		public void InsertClassShortNameAt(ClassShortNameType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ClassShortName", index, newValue.ToString());
		}

		public void ReplaceClassShortNameAt(ClassShortNameType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ClassShortName", index, newValue.ToString());
		}
		#endregion // ClassShortName accessor methods

		#region ClassShortName collection
        public ClassShortNameCollection	MyClassShortNames = new ClassShortNameCollection( );

        public class ClassShortNameCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ClassShortNameEnumerator GetEnumerator() 
			{
				return new ClassShortNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ClassShortNameEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public ClassShortNameEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ClassShortNameCount );
			}
			public ClassShortNameType  Current 
			{
				get 
				{
					return(parent.GetClassShortNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ClassShortName collection

		#region EventClassStatus accessor methods
		public static int GetEventClassStatusMinCount()
		{
			return 1;
		}

		public static int EventClassStatusMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEventClassStatusMaxCount()
		{
			return 1;
		}

		public static int EventClassStatusMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEventClassStatusCount()
		{
			return DomChildCount(NodeType.Element, "", "EventClassStatus");
		}

		public int EventClassStatusCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EventClassStatus");
			}
		}

		public bool HasEventClassStatus()
		{
			return HasDomChild(NodeType.Element, "", "EventClassStatus");
		}

		public EventClassStatusType NewEventClassStatus()
		{
			return new EventClassStatusType(domNode.OwnerDocument.CreateElement("EventClassStatus", ""));
		}

		public EventClassStatusType GetEventClassStatusAt(int index)
		{
			return new EventClassStatusType(GetDomChildAt(NodeType.Element, "", "EventClassStatus", index));
		}

		public XmlNode GetStartingEventClassStatusCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EventClassStatus" );
		}

		public XmlNode GetAdvancedEventClassStatusCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EventClassStatus", curNode );
		}

		public EventClassStatusType GetEventClassStatusValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EventClassStatusType( curNode );
		}


		public EventClassStatusType GetEventClassStatus()
		{
			return GetEventClassStatusAt(0);
		}

		public EventClassStatusType EventClassStatus
		{
			get
			{
				return GetEventClassStatusAt(0);
			}
		}

		public void RemoveEventClassStatusAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EventClassStatus", index);
		}

		public void RemoveEventClassStatus()
		{
			while (HasEventClassStatus())
				RemoveEventClassStatusAt(0);
		}

		public void AddEventClassStatus(EventClassStatusType newValue)
		{
			AppendDomElement("", "EventClassStatus", newValue);
		}

		public void InsertEventClassStatusAt(EventClassStatusType newValue, int index)
		{
			InsertDomElementAt("", "EventClassStatus", index, newValue);
		}

		public void ReplaceEventClassStatusAt(EventClassStatusType newValue, int index)
		{
			ReplaceDomElementAt("", "EventClassStatus", index, newValue);
		}
		#endregion // EventClassStatus accessor methods

		#region EventClassStatus collection
        public EventClassStatusCollection	MyEventClassStatuss = new EventClassStatusCollection( );

        public class EventClassStatusCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EventClassStatusEnumerator GetEnumerator() 
			{
				return new EventClassStatusEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EventClassStatusEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public EventClassStatusEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EventClassStatusCount );
			}
			public EventClassStatusType  Current 
			{
				get 
				{
					return(parent.GetEventClassStatusAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EventClassStatus collection

		#region EventId accessor methods
		public static int GetEventIdMinCount()
		{
			return 1;
		}

		public static int EventIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEventIdMaxCount()
		{
			return 1;
		}

		public static int EventIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEventIdCount()
		{
			return DomChildCount(NodeType.Element, "", "EventId");
		}

		public int EventIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EventId");
			}
		}

		public bool HasEventId()
		{
			return HasDomChild(NodeType.Element, "", "EventId");
		}

		public EventIdType NewEventId()
		{
			return new EventIdType();
		}

		public EventIdType GetEventIdAt(int index)
		{
			return new EventIdType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "EventId", index)));
		}

		public XmlNode GetStartingEventIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EventId" );
		}

		public XmlNode GetAdvancedEventIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EventId", curNode );
		}

		public EventIdType GetEventIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EventIdType( curNode.InnerText );
		}


		public EventIdType GetEventId()
		{
			return GetEventIdAt(0);
		}

		public EventIdType EventId
		{
			get
			{
				return GetEventIdAt(0);
			}
		}

		public void RemoveEventIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EventId", index);
		}

		public void RemoveEventId()
		{
			while (HasEventId())
				RemoveEventIdAt(0);
		}

		public void AddEventId(EventIdType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "EventId", newValue.ToString());
		}

		public void InsertEventIdAt(EventIdType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "EventId", index, newValue.ToString());
		}

		public void ReplaceEventIdAt(EventIdType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "EventId", index, newValue.ToString());
		}
		#endregion // EventId accessor methods

		#region EventId collection
        public EventIdCollection	MyEventIds = new EventIdCollection( );

        public class EventIdCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EventIdEnumerator GetEnumerator() 
			{
				return new EventIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EventIdEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public EventIdEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EventIdCount );
			}
			public EventIdType  Current 
			{
				get 
				{
					return(parent.GetEventIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EventId collection

		#region ClassTypeId accessor methods
		public static int GetClassTypeIdMinCount()
		{
			return 1;
		}

		public static int ClassTypeIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetClassTypeIdMaxCount()
		{
			return 1;
		}

		public static int ClassTypeIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetClassTypeIdCount()
		{
			return DomChildCount(NodeType.Element, "", "ClassTypeId");
		}

		public int ClassTypeIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ClassTypeId");
			}
		}

		public bool HasClassTypeId()
		{
			return HasDomChild(NodeType.Element, "", "ClassTypeId");
		}

		public ClassTypeIdType NewClassTypeId()
		{
			return new ClassTypeIdType();
		}

		public ClassTypeIdType GetClassTypeIdAt(int index)
		{
			return new ClassTypeIdType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ClassTypeId", index)));
		}

		public XmlNode GetStartingClassTypeIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ClassTypeId" );
		}

		public XmlNode GetAdvancedClassTypeIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ClassTypeId", curNode );
		}

		public ClassTypeIdType GetClassTypeIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ClassTypeIdType( curNode.InnerText );
		}


		public ClassTypeIdType GetClassTypeId()
		{
			return GetClassTypeIdAt(0);
		}

		public ClassTypeIdType ClassTypeId
		{
			get
			{
				return GetClassTypeIdAt(0);
			}
		}

		public void RemoveClassTypeIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ClassTypeId", index);
		}

		public void RemoveClassTypeId()
		{
			while (HasClassTypeId())
				RemoveClassTypeIdAt(0);
		}

		public void AddClassTypeId(ClassTypeIdType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "ClassTypeId", newValue.ToString());
		}

		public void InsertClassTypeIdAt(ClassTypeIdType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ClassTypeId", index, newValue.ToString());
		}

		public void ReplaceClassTypeIdAt(ClassTypeIdType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ClassTypeId", index, newValue.ToString());
		}
		#endregion // ClassTypeId accessor methods

		#region ClassTypeId collection
        public ClassTypeIdCollection	MyClassTypeIds = new ClassTypeIdCollection( );

        public class ClassTypeIdCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ClassTypeIdEnumerator GetEnumerator() 
			{
				return new ClassTypeIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ClassTypeIdEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public ClassTypeIdEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ClassTypeIdCount );
			}
			public ClassTypeIdType  Current 
			{
				get 
				{
					return(parent.GetClassTypeIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ClassTypeId collection

		#region BaseClassId accessor methods
		public static int GetBaseClassIdMinCount()
		{
			return 1;
		}

		public static int BaseClassIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetBaseClassIdMaxCount()
		{
			return 1;
		}

		public static int BaseClassIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBaseClassIdCount()
		{
			return DomChildCount(NodeType.Element, "", "BaseClassId");
		}

		public int BaseClassIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "BaseClassId");
			}
		}

		public bool HasBaseClassId()
		{
			return HasDomChild(NodeType.Element, "", "BaseClassId");
		}

		public SchemaString NewBaseClassId()
		{
			return new SchemaString();
		}

		public SchemaString GetBaseClassIdAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "BaseClassId", index)));
		}

		public XmlNode GetStartingBaseClassIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "BaseClassId" );
		}

		public XmlNode GetAdvancedBaseClassIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "BaseClassId", curNode );
		}

		public SchemaString GetBaseClassIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetBaseClassId()
		{
			return GetBaseClassIdAt(0);
		}

		public SchemaString BaseClassId
		{
			get
			{
				return GetBaseClassIdAt(0);
			}
		}

		public void RemoveBaseClassIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "BaseClassId", index);
		}

		public void RemoveBaseClassId()
		{
			while (HasBaseClassId())
				RemoveBaseClassIdAt(0);
		}

		public void AddBaseClassId(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "BaseClassId", newValue.ToString());
		}

		public void InsertBaseClassIdAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "BaseClassId", index, newValue.ToString());
		}

		public void ReplaceBaseClassIdAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "BaseClassId", index, newValue.ToString());
		}
		#endregion // BaseClassId accessor methods

		#region BaseClassId collection
        public BaseClassIdCollection	MyBaseClassIds = new BaseClassIdCollection( );

        public class BaseClassIdCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public BaseClassIdEnumerator GetEnumerator() 
			{
				return new BaseClassIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class BaseClassIdEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public BaseClassIdEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.BaseClassIdCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetBaseClassIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // BaseClassId collection

		#region ExternalId accessor methods
		public static int GetExternalIdMinCount()
		{
			return 0;
		}

		public static int ExternalIdMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetExternalIdMaxCount()
		{
			return 1;
		}

		public static int ExternalIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExternalIdCount()
		{
			return DomChildCount(NodeType.Element, "", "ExternalId");
		}

		public int ExternalIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ExternalId");
			}
		}

		public bool HasExternalId()
		{
			return HasDomChild(NodeType.Element, "", "ExternalId");
		}

		public ExternalIdType NewExternalId()
		{
			return new ExternalIdType();
		}

		public ExternalIdType GetExternalIdAt(int index)
		{
			return new ExternalIdType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ExternalId", index)));
		}

		public XmlNode GetStartingExternalIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ExternalId" );
		}

		public XmlNode GetAdvancedExternalIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ExternalId", curNode );
		}

		public ExternalIdType GetExternalIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ExternalIdType( curNode.InnerText );
		}


		public ExternalIdType GetExternalId()
		{
			return GetExternalIdAt(0);
		}

		public ExternalIdType ExternalId
		{
			get
			{
				return GetExternalIdAt(0);
			}
		}

		public void RemoveExternalIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ExternalId", index);
		}

		public void RemoveExternalId()
		{
			while (HasExternalId())
				RemoveExternalIdAt(0);
		}

		public void AddExternalId(ExternalIdType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "ExternalId", newValue.ToString());
		}

		public void InsertExternalIdAt(ExternalIdType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ExternalId", index, newValue.ToString());
		}

		public void ReplaceExternalIdAt(ExternalIdType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ExternalId", index, newValue.ToString());
		}
		#endregion // ExternalId accessor methods

		#region ExternalId collection
        public ExternalIdCollection	MyExternalIds = new ExternalIdCollection( );

        public class ExternalIdCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ExternalIdEnumerator GetEnumerator() 
			{
				return new ExternalIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ExternalIdEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public ExternalIdEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ExternalIdCount );
			}
			public ExternalIdType  Current 
			{
				get 
				{
					return(parent.GetExternalIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ExternalId collection

		#region ModifyDate accessor methods
		public static int GetModifyDateMinCount()
		{
			return 1;
		}

		public static int ModifyDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetModifyDateMaxCount()
		{
			return 1;
		}

		public static int ModifyDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetModifyDateCount()
		{
			return DomChildCount(NodeType.Element, "", "ModifyDate");
		}

		public int ModifyDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ModifyDate");
			}
		}

		public bool HasModifyDate()
		{
			return HasDomChild(NodeType.Element, "", "ModifyDate");
		}

		public ModifyDateType NewModifyDate()
		{
			return new ModifyDateType(domNode.OwnerDocument.CreateElement("ModifyDate", ""));
		}

		public ModifyDateType GetModifyDateAt(int index)
		{
			return new ModifyDateType(GetDomChildAt(NodeType.Element, "", "ModifyDate", index));
		}

		public XmlNode GetStartingModifyDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ModifyDate" );
		}

		public XmlNode GetAdvancedModifyDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ModifyDate", curNode );
		}

		public ModifyDateType GetModifyDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ModifyDateType( curNode );
		}


		public ModifyDateType GetModifyDate()
		{
			return GetModifyDateAt(0);
		}

		public ModifyDateType ModifyDate
		{
			get
			{
				return GetModifyDateAt(0);
			}
		}

		public void RemoveModifyDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ModifyDate", index);
		}

		public void RemoveModifyDate()
		{
			while (HasModifyDate())
				RemoveModifyDateAt(0);
		}

		public void AddModifyDate(ModifyDateType newValue)
		{
			AppendDomElement("", "ModifyDate", newValue);
		}

		public void InsertModifyDateAt(ModifyDateType newValue, int index)
		{
			InsertDomElementAt("", "ModifyDate", index, newValue);
		}

		public void ReplaceModifyDateAt(ModifyDateType newValue, int index)
		{
			ReplaceDomElementAt("", "ModifyDate", index, newValue);
		}
		#endregion // ModifyDate accessor methods

		#region ModifyDate collection
        public ModifyDateCollection	MyModifyDates = new ModifyDateCollection( );

        public class ModifyDateCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ModifyDateEnumerator GetEnumerator() 
			{
				return new ModifyDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ModifyDateEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public ModifyDateEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ModifyDateCount );
			}
			public ModifyDateType  Current 
			{
				get 
				{
					return(parent.GetModifyDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ModifyDate collection

		#region ClassRaceInfo accessor methods
		public static int GetClassRaceInfoMinCount()
		{
			return 1;
		}

		public static int ClassRaceInfoMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetClassRaceInfoMaxCount()
		{
			return 1;
		}

		public static int ClassRaceInfoMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetClassRaceInfoCount()
		{
			return DomChildCount(NodeType.Element, "", "ClassRaceInfo");
		}

		public int ClassRaceInfoCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ClassRaceInfo");
			}
		}

		public bool HasClassRaceInfo()
		{
			return HasDomChild(NodeType.Element, "", "ClassRaceInfo");
		}

		public ClassRaceInfoType NewClassRaceInfo()
		{
			return new ClassRaceInfoType(domNode.OwnerDocument.CreateElement("ClassRaceInfo", ""));
		}

		public ClassRaceInfoType GetClassRaceInfoAt(int index)
		{
			return new ClassRaceInfoType(GetDomChildAt(NodeType.Element, "", "ClassRaceInfo", index));
		}

		public XmlNode GetStartingClassRaceInfoCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ClassRaceInfo" );
		}

		public XmlNode GetAdvancedClassRaceInfoCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ClassRaceInfo", curNode );
		}

		public ClassRaceInfoType GetClassRaceInfoValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ClassRaceInfoType( curNode );
		}


		public ClassRaceInfoType GetClassRaceInfo()
		{
			return GetClassRaceInfoAt(0);
		}

		public ClassRaceInfoType ClassRaceInfo
		{
			get
			{
				return GetClassRaceInfoAt(0);
			}
		}

		public void RemoveClassRaceInfoAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ClassRaceInfo", index);
		}

		public void RemoveClassRaceInfo()
		{
			while (HasClassRaceInfo())
				RemoveClassRaceInfoAt(0);
		}

		public void AddClassRaceInfo(ClassRaceInfoType newValue)
		{
			AppendDomElement("", "ClassRaceInfo", newValue);
		}

		public void InsertClassRaceInfoAt(ClassRaceInfoType newValue, int index)
		{
			InsertDomElementAt("", "ClassRaceInfo", index, newValue);
		}

		public void ReplaceClassRaceInfoAt(ClassRaceInfoType newValue, int index)
		{
			ReplaceDomElementAt("", "ClassRaceInfo", index, newValue);
		}
		#endregion // ClassRaceInfo accessor methods

		#region ClassRaceInfo collection
        public ClassRaceInfoCollection	MyClassRaceInfos = new ClassRaceInfoCollection( );

        public class ClassRaceInfoCollection: IEnumerable
        {
            EventClassType parent;
            public EventClassType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ClassRaceInfoEnumerator GetEnumerator() 
			{
				return new ClassRaceInfoEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ClassRaceInfoEnumerator: IEnumerator 
        {
			int nIndex;
			EventClassType parent;
			public ClassRaceInfoEnumerator(EventClassType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ClassRaceInfoCount );
			}
			public ClassRaceInfoType  Current 
			{
				get 
				{
					return(parent.GetClassRaceInfoAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ClassRaceInfo collection

        private void SetCollectionParents()
        {
            MylowAges.Parent = this; 
            Mysexs.Parent = this; 
            MynumberInTeams.Parent = this; 
            MyteamEntrys.Parent = this; 
            MynumberOfLegss.Parent = this; 
            MynumberOfVacanciess.Parent = this; 
            MymaxNumberInClasss.Parent = this; 
            MydivideClassMethods.Parent = this; 
            MyactualForRankings.Parent = this; 
            MytimePresentations.Parent = this; 
            MytotalResults.Parent = this; 
            MynormalizedClasss.Parent = this; 
            MynumberOfPrizess.Parent = this; 
            MyallowEntryInAdvances.Parent = this; 
            Mysequences.Parent = this; 
            MyEventClassIds.Parent = this; 
            MyNames.Parent = this; 
            MyClassShortNames.Parent = this; 
            MyEventClassStatuss.Parent = this; 
            MyEventIds.Parent = this; 
            MyClassTypeIds.Parent = this; 
            MyBaseClassIds.Parent = this; 
            MyExternalIds.Parent = this; 
            MyModifyDates.Parent = this; 
            MyClassRaceInfos.Parent = this; 
	}
}
}
