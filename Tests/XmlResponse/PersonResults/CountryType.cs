//
// CountryType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class CountryType : Altova.Xml.Node
	{
		#region Forward constructors

		public CountryType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public CountryType(XmlNode node) : base(node) { SetCollectionParents(); }
		public CountryType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public CountryType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CountryId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CountryId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new CountryIdType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Alpha2" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Alpha2", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Alpha2Type(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Alpha3" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Alpha3", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Alpha3Type(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new NameType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ModifyDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ModifyDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ModifyDateType(DOMNode).AdjustPrefix();
			}
		}



		#region CountryId accessor methods
		public static int GetCountryIdMinCount()
		{
			return 1;
		}

		public static int CountryIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCountryIdMaxCount()
		{
			return 1;
		}

		public static int CountryIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCountryIdCount()
		{
			return DomChildCount(NodeType.Element, "", "CountryId");
		}

		public int CountryIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CountryId");
			}
		}

		public bool HasCountryId()
		{
			return HasDomChild(NodeType.Element, "", "CountryId");
		}

		public CountryIdType NewCountryId()
		{
			return new CountryIdType(domNode.OwnerDocument.CreateElement("CountryId", ""));
		}

		public CountryIdType GetCountryIdAt(int index)
		{
			return new CountryIdType(GetDomChildAt(NodeType.Element, "", "CountryId", index));
		}

		public XmlNode GetStartingCountryIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CountryId" );
		}

		public XmlNode GetAdvancedCountryIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CountryId", curNode );
		}

		public CountryIdType GetCountryIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CountryIdType( curNode );
		}


		public CountryIdType GetCountryId()
		{
			return GetCountryIdAt(0);
		}

		public CountryIdType CountryId
		{
			get
			{
				return GetCountryIdAt(0);
			}
		}

		public void RemoveCountryIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CountryId", index);
		}

		public void RemoveCountryId()
		{
			while (HasCountryId())
				RemoveCountryIdAt(0);
		}

		public void AddCountryId(CountryIdType newValue)
		{
			AppendDomElement("", "CountryId", newValue);
		}

		public void InsertCountryIdAt(CountryIdType newValue, int index)
		{
			InsertDomElementAt("", "CountryId", index, newValue);
		}

		public void ReplaceCountryIdAt(CountryIdType newValue, int index)
		{
			ReplaceDomElementAt("", "CountryId", index, newValue);
		}
		#endregion // CountryId accessor methods

		#region CountryId collection
        public CountryIdCollection	MyCountryIds = new CountryIdCollection( );

        public class CountryIdCollection: IEnumerable
        {
            CountryType parent;
            public CountryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CountryIdEnumerator GetEnumerator() 
			{
				return new CountryIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CountryIdEnumerator: IEnumerator 
        {
			int nIndex;
			CountryType parent;
			public CountryIdEnumerator(CountryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CountryIdCount );
			}
			public CountryIdType  Current 
			{
				get 
				{
					return(parent.GetCountryIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CountryId collection

		#region Alpha2 accessor methods
		public static int GetAlpha2MinCount()
		{
			return 1;
		}

		public static int Alpha2MinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetAlpha2MaxCount()
		{
			return 1;
		}

		public static int Alpha2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAlpha2Count()
		{
			return DomChildCount(NodeType.Element, "", "Alpha2");
		}

		public int Alpha2Count
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Alpha2");
			}
		}

		public bool HasAlpha2()
		{
			return HasDomChild(NodeType.Element, "", "Alpha2");
		}

		public Alpha2Type NewAlpha2()
		{
			return new Alpha2Type(domNode.OwnerDocument.CreateElement("Alpha2", ""));
		}

		public Alpha2Type GetAlpha2At(int index)
		{
			return new Alpha2Type(GetDomChildAt(NodeType.Element, "", "Alpha2", index));
		}

		public XmlNode GetStartingAlpha2Cursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Alpha2" );
		}

		public XmlNode GetAdvancedAlpha2Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Alpha2", curNode );
		}

		public Alpha2Type GetAlpha2ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Alpha2Type( curNode );
		}


		public Alpha2Type GetAlpha2()
		{
			return GetAlpha2At(0);
		}

		public Alpha2Type Alpha2
		{
			get
			{
				return GetAlpha2At(0);
			}
		}

		public void RemoveAlpha2At(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Alpha2", index);
		}

		public void RemoveAlpha2()
		{
			while (HasAlpha2())
				RemoveAlpha2At(0);
		}

		public void AddAlpha2(Alpha2Type newValue)
		{
			AppendDomElement("", "Alpha2", newValue);
		}

		public void InsertAlpha2At(Alpha2Type newValue, int index)
		{
			InsertDomElementAt("", "Alpha2", index, newValue);
		}

		public void ReplaceAlpha2At(Alpha2Type newValue, int index)
		{
			ReplaceDomElementAt("", "Alpha2", index, newValue);
		}
		#endregion // Alpha2 accessor methods

		#region Alpha2 collection
        public Alpha2Collection	MyAlpha2s = new Alpha2Collection( );

        public class Alpha2Collection: IEnumerable
        {
            CountryType parent;
            public CountryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Alpha2Enumerator GetEnumerator() 
			{
				return new Alpha2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Alpha2Enumerator: IEnumerator 
        {
			int nIndex;
			CountryType parent;
			public Alpha2Enumerator(CountryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Alpha2Count );
			}
			public Alpha2Type  Current 
			{
				get 
				{
					return(parent.GetAlpha2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Alpha2 collection

		#region Alpha3 accessor methods
		public static int GetAlpha3MinCount()
		{
			return 1;
		}

		public static int Alpha3MinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetAlpha3MaxCount()
		{
			return 1;
		}

		public static int Alpha3MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAlpha3Count()
		{
			return DomChildCount(NodeType.Element, "", "Alpha3");
		}

		public int Alpha3Count
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Alpha3");
			}
		}

		public bool HasAlpha3()
		{
			return HasDomChild(NodeType.Element, "", "Alpha3");
		}

		public Alpha3Type NewAlpha3()
		{
			return new Alpha3Type(domNode.OwnerDocument.CreateElement("Alpha3", ""));
		}

		public Alpha3Type GetAlpha3At(int index)
		{
			return new Alpha3Type(GetDomChildAt(NodeType.Element, "", "Alpha3", index));
		}

		public XmlNode GetStartingAlpha3Cursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Alpha3" );
		}

		public XmlNode GetAdvancedAlpha3Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Alpha3", curNode );
		}

		public Alpha3Type GetAlpha3ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Alpha3Type( curNode );
		}


		public Alpha3Type GetAlpha3()
		{
			return GetAlpha3At(0);
		}

		public Alpha3Type Alpha3
		{
			get
			{
				return GetAlpha3At(0);
			}
		}

		public void RemoveAlpha3At(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Alpha3", index);
		}

		public void RemoveAlpha3()
		{
			while (HasAlpha3())
				RemoveAlpha3At(0);
		}

		public void AddAlpha3(Alpha3Type newValue)
		{
			AppendDomElement("", "Alpha3", newValue);
		}

		public void InsertAlpha3At(Alpha3Type newValue, int index)
		{
			InsertDomElementAt("", "Alpha3", index, newValue);
		}

		public void ReplaceAlpha3At(Alpha3Type newValue, int index)
		{
			ReplaceDomElementAt("", "Alpha3", index, newValue);
		}
		#endregion // Alpha3 accessor methods

		#region Alpha3 collection
        public Alpha3Collection	MyAlpha3s = new Alpha3Collection( );

        public class Alpha3Collection: IEnumerable
        {
            CountryType parent;
            public CountryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Alpha3Enumerator GetEnumerator() 
			{
				return new Alpha3Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Alpha3Enumerator: IEnumerator 
        {
			int nIndex;
			CountryType parent;
			public Alpha3Enumerator(CountryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Alpha3Count );
			}
			public Alpha3Type  Current 
			{
				get 
				{
					return(parent.GetAlpha3At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Alpha3 collection

		#region Name accessor methods
		public static int GetNameMinCount()
		{
			return 1;
		}

		public static int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNameMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int NameMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "", "Name");
		}

		public NameType NewName()
		{
			return new NameType(domNode.OwnerDocument.CreateElement("Name", ""));
		}

		public NameType GetNameAt(int index)
		{
			return new NameType(GetDomChildAt(NodeType.Element, "", "Name", index));
		}

		public XmlNode GetStartingNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Name", curNode );
		}

		public NameType GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new NameType( curNode );
		}


		public NameType GetName()
		{
			return GetNameAt(0);
		}

		public NameType Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Name", index);
		}

		public void RemoveName()
		{
			while (HasName())
				RemoveNameAt(0);
		}

		public void AddName(NameType newValue)
		{
			AppendDomElement("", "Name", newValue);
		}

		public void InsertNameAt(NameType newValue, int index)
		{
			InsertDomElementAt("", "Name", index, newValue);
		}

		public void ReplaceNameAt(NameType newValue, int index)
		{
			ReplaceDomElementAt("", "Name", index, newValue);
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            CountryType parent;
            public CountryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			CountryType parent;
			public NameEnumerator(CountryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public NameType  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region ModifyDate accessor methods
		public static int GetModifyDateMinCount()
		{
			return 1;
		}

		public static int ModifyDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetModifyDateMaxCount()
		{
			return 1;
		}

		public static int ModifyDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetModifyDateCount()
		{
			return DomChildCount(NodeType.Element, "", "ModifyDate");
		}

		public int ModifyDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ModifyDate");
			}
		}

		public bool HasModifyDate()
		{
			return HasDomChild(NodeType.Element, "", "ModifyDate");
		}

		public ModifyDateType NewModifyDate()
		{
			return new ModifyDateType(domNode.OwnerDocument.CreateElement("ModifyDate", ""));
		}

		public ModifyDateType GetModifyDateAt(int index)
		{
			return new ModifyDateType(GetDomChildAt(NodeType.Element, "", "ModifyDate", index));
		}

		public XmlNode GetStartingModifyDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ModifyDate" );
		}

		public XmlNode GetAdvancedModifyDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ModifyDate", curNode );
		}

		public ModifyDateType GetModifyDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ModifyDateType( curNode );
		}


		public ModifyDateType GetModifyDate()
		{
			return GetModifyDateAt(0);
		}

		public ModifyDateType ModifyDate
		{
			get
			{
				return GetModifyDateAt(0);
			}
		}

		public void RemoveModifyDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ModifyDate", index);
		}

		public void RemoveModifyDate()
		{
			while (HasModifyDate())
				RemoveModifyDateAt(0);
		}

		public void AddModifyDate(ModifyDateType newValue)
		{
			AppendDomElement("", "ModifyDate", newValue);
		}

		public void InsertModifyDateAt(ModifyDateType newValue, int index)
		{
			InsertDomElementAt("", "ModifyDate", index, newValue);
		}

		public void ReplaceModifyDateAt(ModifyDateType newValue, int index)
		{
			ReplaceDomElementAt("", "ModifyDate", index, newValue);
		}
		#endregion // ModifyDate accessor methods

		#region ModifyDate collection
        public ModifyDateCollection	MyModifyDates = new ModifyDateCollection( );

        public class ModifyDateCollection: IEnumerable
        {
            CountryType parent;
            public CountryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ModifyDateEnumerator GetEnumerator() 
			{
				return new ModifyDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ModifyDateEnumerator: IEnumerator 
        {
			int nIndex;
			CountryType parent;
			public ModifyDateEnumerator(CountryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ModifyDateCount );
			}
			public ModifyDateType  Current 
			{
				get 
				{
					return(parent.GetModifyDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ModifyDate collection

        private void SetCollectionParents()
        {
            MyCountryIds.Parent = this; 
            MyAlpha2s.Parent = this; 
            MyAlpha3s.Parent = this; 
            MyNames.Parent = this; 
            MyModifyDates.Parent = this; 
	}
}
}
