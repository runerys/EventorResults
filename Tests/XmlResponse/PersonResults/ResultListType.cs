//
// ResultListType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class ResultListType : Altova.Xml.Node
	{
		#region Forward constructors

		public ResultListType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ResultListType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ResultListType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ResultListType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Event" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Event", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new EventType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ClassResult" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ClassResult", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ClassResultType(DOMNode).AdjustPrefix();
			}
		}



		#region Event2 accessor methods
		public static int GetEvent2MinCount()
		{
			return 1;
		}

		public static int Event2MinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEvent2MaxCount()
		{
			return 1;
		}

		public static int Event2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEvent2Count()
		{
			return DomChildCount(NodeType.Element, "", "Event");
		}

		public int Event2Count
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Event");
			}
		}

		public bool HasEvent2()
		{
			return HasDomChild(NodeType.Element, "", "Event");
		}

		public EventType NewEvent2()
		{
			return new EventType(domNode.OwnerDocument.CreateElement("Event", ""));
		}

		public EventType GetEvent2At(int index)
		{
			return new EventType(GetDomChildAt(NodeType.Element, "", "Event", index));
		}

		public XmlNode GetStartingEvent2Cursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Event" );
		}

		public XmlNode GetAdvancedEvent2Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Event", curNode );
		}

		public EventType GetEvent2ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EventType( curNode );
		}


		public EventType GetEvent2()
		{
			return GetEvent2At(0);
		}

		public EventType Event2
		{
			get
			{
				return GetEvent2At(0);
			}
		}

		public void RemoveEvent2At(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Event", index);
		}

		public void RemoveEvent2()
		{
			while (HasEvent2())
				RemoveEvent2At(0);
		}

		public void AddEvent2(EventType newValue)
		{
			AppendDomElement("", "Event", newValue);
		}

		public void InsertEvent2At(EventType newValue, int index)
		{
			InsertDomElementAt("", "Event", index, newValue);
		}

		public void ReplaceEvent2At(EventType newValue, int index)
		{
			ReplaceDomElementAt("", "Event", index, newValue);
		}
		#endregion // Event2 accessor methods

		#region Event2 collection
        public Event2Collection	MyEvent2s = new Event2Collection( );

        public class Event2Collection: IEnumerable
        {
            ResultListType parent;
            public ResultListType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Event2Enumerator GetEnumerator() 
			{
				return new Event2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Event2Enumerator: IEnumerator 
        {
			int nIndex;
			ResultListType parent;
			public Event2Enumerator(ResultListType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Event2Count );
			}
			public EventType  Current 
			{
				get 
				{
					return(parent.GetEvent2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Event2 collection

		#region ClassResult accessor methods
		public static int GetClassResultMinCount()
		{
			return 1;
		}

		public static int ClassResultMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetClassResultMaxCount()
		{
			return 1;
		}

		public static int ClassResultMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetClassResultCount()
		{
			return DomChildCount(NodeType.Element, "", "ClassResult");
		}

		public int ClassResultCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ClassResult");
			}
		}

		public bool HasClassResult()
		{
			return HasDomChild(NodeType.Element, "", "ClassResult");
		}

		public ClassResultType NewClassResult()
		{
			return new ClassResultType(domNode.OwnerDocument.CreateElement("ClassResult", ""));
		}

		public ClassResultType GetClassResultAt(int index)
		{
			return new ClassResultType(GetDomChildAt(NodeType.Element, "", "ClassResult", index));
		}

		public XmlNode GetStartingClassResultCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ClassResult" );
		}

		public XmlNode GetAdvancedClassResultCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ClassResult", curNode );
		}

		public ClassResultType GetClassResultValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ClassResultType( curNode );
		}


		public ClassResultType GetClassResult()
		{
			return GetClassResultAt(0);
		}

		public ClassResultType ClassResult
		{
			get
			{
				return GetClassResultAt(0);
			}
		}

		public void RemoveClassResultAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ClassResult", index);
		}

		public void RemoveClassResult()
		{
			while (HasClassResult())
				RemoveClassResultAt(0);
		}

		public void AddClassResult(ClassResultType newValue)
		{
			AppendDomElement("", "ClassResult", newValue);
		}

		public void InsertClassResultAt(ClassResultType newValue, int index)
		{
			InsertDomElementAt("", "ClassResult", index, newValue);
		}

		public void ReplaceClassResultAt(ClassResultType newValue, int index)
		{
			ReplaceDomElementAt("", "ClassResult", index, newValue);
		}
		#endregion // ClassResult accessor methods

		#region ClassResult collection
        public ClassResultCollection	MyClassResults = new ClassResultCollection( );

        public class ClassResultCollection: IEnumerable
        {
            ResultListType parent;
            public ResultListType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ClassResultEnumerator GetEnumerator() 
			{
				return new ClassResultEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ClassResultEnumerator: IEnumerator 
        {
			int nIndex;
			ResultListType parent;
			public ClassResultEnumerator(ResultListType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ClassResultCount );
			}
			public ClassResultType  Current 
			{
				get 
				{
					return(parent.GetClassResultAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ClassResult collection

        private void SetCollectionParents()
        {
            MyEvent2s.Parent = this; 
            MyClassResults.Parent = this; 
	}
}
}
