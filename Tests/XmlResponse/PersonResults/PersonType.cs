//
// PersonType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class PersonType : Altova.Xml.Node
	{
		#region Forward constructors

		public PersonType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public PersonType(XmlNode node) : base(node) { SetCollectionParents(); }
		public PersonType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public PersonType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "sex" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "sex", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "PersonName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "PersonName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new PersonNameType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "PersonId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "PersonId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new PersonIdType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "BirthDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "BirthDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new BirthDateType(DOMNode).AdjustPrefix();
			}
		}



		#region sex accessor methods
		public static int GetsexMinCount()
		{
			return 0;
		}

		public static int sexMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetsexMaxCount()
		{
			return 1;
		}

		public static int sexMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetsexCount()
		{
			return DomChildCount(NodeType.Attribute, "", "sex");
		}

		public int sexCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "sex");
			}
		}

		public bool Hassex()
		{
			return HasDomChild(NodeType.Attribute, "", "sex");
		}

		public sexType2 Newsex()
		{
			return new sexType2();
		}

		public sexType2 GetsexAt(int index)
		{
			return new sexType2(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "sex", index)));
		}

		public XmlNode GetStartingsexCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "sex" );
		}

		public XmlNode GetAdvancedsexCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "sex", curNode );
		}

		public sexType2 GetsexValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new sexType2( curNode.Value );
		}


		public sexType2 Getsex()
		{
			return GetsexAt(0);
		}

		public sexType2 sex
		{
			get
			{
				return GetsexAt(0);
			}
		}

		public void RemovesexAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "sex", index);
		}

		public void Removesex()
		{
			while (Hassex())
				RemovesexAt(0);
		}

		public void Addsex(sexType2 newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "sex", newValue.ToString());
		}

		public void InsertsexAt(sexType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "sex", index, newValue.ToString());
		}

		public void ReplacesexAt(sexType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "sex", index, newValue.ToString());
		}
		#endregion // sex accessor methods

		#region sex collection
        public sexCollection	Mysexs = new sexCollection( );

        public class sexCollection: IEnumerable
        {
            PersonType parent;
            public PersonType Parent
			{
				set
				{
					parent = value;
				}
			}
			public sexEnumerator GetEnumerator() 
			{
				return new sexEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class sexEnumerator: IEnumerator 
        {
			int nIndex;
			PersonType parent;
			public sexEnumerator(PersonType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.sexCount );
			}
			public sexType2  Current 
			{
				get 
				{
					return(parent.GetsexAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // sex collection

		#region PersonName accessor methods
		public static int GetPersonNameMinCount()
		{
			return 1;
		}

		public static int PersonNameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPersonNameMaxCount()
		{
			return 1;
		}

		public static int PersonNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPersonNameCount()
		{
			return DomChildCount(NodeType.Element, "", "PersonName");
		}

		public int PersonNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "PersonName");
			}
		}

		public bool HasPersonName()
		{
			return HasDomChild(NodeType.Element, "", "PersonName");
		}

		public PersonNameType NewPersonName()
		{
			return new PersonNameType(domNode.OwnerDocument.CreateElement("PersonName", ""));
		}

		public PersonNameType GetPersonNameAt(int index)
		{
			return new PersonNameType(GetDomChildAt(NodeType.Element, "", "PersonName", index));
		}

		public XmlNode GetStartingPersonNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "PersonName" );
		}

		public XmlNode GetAdvancedPersonNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "PersonName", curNode );
		}

		public PersonNameType GetPersonNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonNameType( curNode );
		}


		public PersonNameType GetPersonName()
		{
			return GetPersonNameAt(0);
		}

		public PersonNameType PersonName
		{
			get
			{
				return GetPersonNameAt(0);
			}
		}

		public void RemovePersonNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "PersonName", index);
		}

		public void RemovePersonName()
		{
			while (HasPersonName())
				RemovePersonNameAt(0);
		}

		public void AddPersonName(PersonNameType newValue)
		{
			AppendDomElement("", "PersonName", newValue);
		}

		public void InsertPersonNameAt(PersonNameType newValue, int index)
		{
			InsertDomElementAt("", "PersonName", index, newValue);
		}

		public void ReplacePersonNameAt(PersonNameType newValue, int index)
		{
			ReplaceDomElementAt("", "PersonName", index, newValue);
		}
		#endregion // PersonName accessor methods

		#region PersonName collection
        public PersonNameCollection	MyPersonNames = new PersonNameCollection( );

        public class PersonNameCollection: IEnumerable
        {
            PersonType parent;
            public PersonType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PersonNameEnumerator GetEnumerator() 
			{
				return new PersonNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PersonNameEnumerator: IEnumerator 
        {
			int nIndex;
			PersonType parent;
			public PersonNameEnumerator(PersonType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PersonNameCount );
			}
			public PersonNameType  Current 
			{
				get 
				{
					return(parent.GetPersonNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PersonName collection

		#region PersonId accessor methods
		public static int GetPersonIdMinCount()
		{
			return 1;
		}

		public static int PersonIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPersonIdMaxCount()
		{
			return 1;
		}

		public static int PersonIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPersonIdCount()
		{
			return DomChildCount(NodeType.Element, "", "PersonId");
		}

		public int PersonIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "PersonId");
			}
		}

		public bool HasPersonId()
		{
			return HasDomChild(NodeType.Element, "", "PersonId");
		}

		public PersonIdType NewPersonId()
		{
			return new PersonIdType(domNode.OwnerDocument.CreateElement("PersonId", ""));
		}

		public PersonIdType GetPersonIdAt(int index)
		{
			return new PersonIdType(GetDomChildAt(NodeType.Element, "", "PersonId", index));
		}

		public XmlNode GetStartingPersonIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "PersonId" );
		}

		public XmlNode GetAdvancedPersonIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "PersonId", curNode );
		}

		public PersonIdType GetPersonIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonIdType( curNode );
		}


		public PersonIdType GetPersonId()
		{
			return GetPersonIdAt(0);
		}

		public PersonIdType PersonId
		{
			get
			{
				return GetPersonIdAt(0);
			}
		}

		public void RemovePersonIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "PersonId", index);
		}

		public void RemovePersonId()
		{
			while (HasPersonId())
				RemovePersonIdAt(0);
		}

		public void AddPersonId(PersonIdType newValue)
		{
			AppendDomElement("", "PersonId", newValue);
		}

		public void InsertPersonIdAt(PersonIdType newValue, int index)
		{
			InsertDomElementAt("", "PersonId", index, newValue);
		}

		public void ReplacePersonIdAt(PersonIdType newValue, int index)
		{
			ReplaceDomElementAt("", "PersonId", index, newValue);
		}
		#endregion // PersonId accessor methods

		#region PersonId collection
        public PersonIdCollection	MyPersonIds = new PersonIdCollection( );

        public class PersonIdCollection: IEnumerable
        {
            PersonType parent;
            public PersonType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PersonIdEnumerator GetEnumerator() 
			{
				return new PersonIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PersonIdEnumerator: IEnumerator 
        {
			int nIndex;
			PersonType parent;
			public PersonIdEnumerator(PersonType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PersonIdCount );
			}
			public PersonIdType  Current 
			{
				get 
				{
					return(parent.GetPersonIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PersonId collection

		#region BirthDate accessor methods
		public static int GetBirthDateMinCount()
		{
			return 1;
		}

		public static int BirthDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetBirthDateMaxCount()
		{
			return 1;
		}

		public static int BirthDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBirthDateCount()
		{
			return DomChildCount(NodeType.Element, "", "BirthDate");
		}

		public int BirthDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "BirthDate");
			}
		}

		public bool HasBirthDate()
		{
			return HasDomChild(NodeType.Element, "", "BirthDate");
		}

		public BirthDateType NewBirthDate()
		{
			return new BirthDateType(domNode.OwnerDocument.CreateElement("BirthDate", ""));
		}

		public BirthDateType GetBirthDateAt(int index)
		{
			return new BirthDateType(GetDomChildAt(NodeType.Element, "", "BirthDate", index));
		}

		public XmlNode GetStartingBirthDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "BirthDate" );
		}

		public XmlNode GetAdvancedBirthDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "BirthDate", curNode );
		}

		public BirthDateType GetBirthDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new BirthDateType( curNode );
		}


		public BirthDateType GetBirthDate()
		{
			return GetBirthDateAt(0);
		}

		public BirthDateType BirthDate
		{
			get
			{
				return GetBirthDateAt(0);
			}
		}

		public void RemoveBirthDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "BirthDate", index);
		}

		public void RemoveBirthDate()
		{
			while (HasBirthDate())
				RemoveBirthDateAt(0);
		}

		public void AddBirthDate(BirthDateType newValue)
		{
			AppendDomElement("", "BirthDate", newValue);
		}

		public void InsertBirthDateAt(BirthDateType newValue, int index)
		{
			InsertDomElementAt("", "BirthDate", index, newValue);
		}

		public void ReplaceBirthDateAt(BirthDateType newValue, int index)
		{
			ReplaceDomElementAt("", "BirthDate", index, newValue);
		}
		#endregion // BirthDate accessor methods

		#region BirthDate collection
        public BirthDateCollection	MyBirthDates = new BirthDateCollection( );

        public class BirthDateCollection: IEnumerable
        {
            PersonType parent;
            public PersonType Parent
			{
				set
				{
					parent = value;
				}
			}
			public BirthDateEnumerator GetEnumerator() 
			{
				return new BirthDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class BirthDateEnumerator: IEnumerator 
        {
			int nIndex;
			PersonType parent;
			public BirthDateEnumerator(PersonType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.BirthDateCount );
			}
			public BirthDateType  Current 
			{
				get 
				{
					return(parent.GetBirthDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // BirthDate collection

        private void SetCollectionParents()
        {
            Mysexs.Parent = this; 
            MyPersonNames.Parent = this; 
            MyPersonIds.Parent = this; 
            MyBirthDates.Parent = this; 
	}
}
}
