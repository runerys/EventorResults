//
// Alpha3Type.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class Alpha3Type : Altova.Xml.Node
	{
		#region Forward constructors

		public Alpha3Type(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Alpha3Type(XmlNode node) : base(node) { SetCollectionParents(); }
		public Alpha3Type(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Alpha3Type(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "value" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "value", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}



		#region value2 accessor methods
		public static int Getvalue2MinCount()
		{
			return 1;
		}

		public static int value2MinCount
		{
			get
			{
				return 1;
			}
		}

		public static int Getvalue2MaxCount()
		{
			return 1;
		}

		public static int value2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getvalue2Count()
		{
			return DomChildCount(NodeType.Attribute, "", "value");
		}

		public int value2Count
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "value");
			}
		}

		public bool Hasvalue2()
		{
			return HasDomChild(NodeType.Attribute, "", "value");
		}

		public valueType2 Newvalue2()
		{
			return new valueType2();
		}

		public valueType2 Getvalue2At(int index)
		{
			return new valueType2(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "value", index)));
		}

		public XmlNode GetStartingvalue2Cursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "value" );
		}

		public XmlNode GetAdvancedvalue2Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "value", curNode );
		}

		public valueType2 Getvalue2ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new valueType2( curNode.Value );
		}


		public valueType2 Getvalue2()
		{
			return Getvalue2At(0);
		}

		public valueType2 value2
		{
			get
			{
				return Getvalue2At(0);
			}
		}

		public void Removevalue2At(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "value", index);
		}

		public void Removevalue2()
		{
			while (Hasvalue2())
				Removevalue2At(0);
		}

		public void Addvalue2(valueType2 newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "value", newValue.ToString());
		}

		public void Insertvalue2At(valueType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "value", index, newValue.ToString());
		}

		public void Replacevalue2At(valueType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "value", index, newValue.ToString());
		}
		#endregion // value2 accessor methods

		#region value2 collection
        public value2Collection	Myvalue2s = new value2Collection( );

        public class value2Collection: IEnumerable
        {
            Alpha3Type parent;
            public Alpha3Type Parent
			{
				set
				{
					parent = value;
				}
			}
			public value2Enumerator GetEnumerator() 
			{
				return new value2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class value2Enumerator: IEnumerator 
        {
			int nIndex;
			Alpha3Type parent;
			public value2Enumerator(Alpha3Type par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.value2Count );
			}
			public valueType2  Current 
			{
				get 
				{
					return(parent.Getvalue2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // value2 collection

        private void SetCollectionParents()
        {
            Myvalue2s.Parent = this; 
	}
}
}
