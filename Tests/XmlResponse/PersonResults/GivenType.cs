//
// GivenType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class GivenType : Altova.Xml.Node
	{
		#region Forward constructors

		public GivenType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public GivenType(XmlNode node) : base(node) { SetCollectionParents(); }
		public GivenType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public GivenType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		#region Value accessor methods
		public SchemaString GetValue()
		{
			return new SchemaString(GetDomNodeValue(domNode));
		}

		public void SetValue(ISchemaType newValue)
		{
			SetDomNodeValue(domNode, newValue.ToString());
		}

		public void Assign(ISchemaType newValue)
		{
			SetValue(newValue);
		}

		public SchemaString Value
		{
			get
			{
				return new SchemaString(GetDomNodeValue(domNode));
			}
			set
			{
				SetDomNodeValue(domNode, value.ToString());
			}
		}
		#endregion // Value accessor methods

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "sequence" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "sequence", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}



		#region sequence accessor methods
		public static int GetsequenceMinCount()
		{
			return 1;
		}

		public static int sequenceMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetsequenceMaxCount()
		{
			return 1;
		}

		public static int sequenceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetsequenceCount()
		{
			return DomChildCount(NodeType.Attribute, "", "sequence");
		}

		public int sequenceCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "sequence");
			}
		}

		public bool Hassequence()
		{
			return HasDomChild(NodeType.Attribute, "", "sequence");
		}

		public sequenceType2 Newsequence()
		{
			return new sequenceType2();
		}

		public sequenceType2 GetsequenceAt(int index)
		{
			return new sequenceType2(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "sequence", index)));
		}

		public XmlNode GetStartingsequenceCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "sequence" );
		}

		public XmlNode GetAdvancedsequenceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "sequence", curNode );
		}

		public sequenceType2 GetsequenceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new sequenceType2( curNode.Value );
		}


		public sequenceType2 Getsequence()
		{
			return GetsequenceAt(0);
		}

		public sequenceType2 sequence
		{
			get
			{
				return GetsequenceAt(0);
			}
		}

		public void RemovesequenceAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "sequence", index);
		}

		public void Removesequence()
		{
			while (Hassequence())
				RemovesequenceAt(0);
		}

		public void Addsequence(sequenceType2 newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "sequence", newValue.ToString());
		}

		public void InsertsequenceAt(sequenceType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "sequence", index, newValue.ToString());
		}

		public void ReplacesequenceAt(sequenceType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "sequence", index, newValue.ToString());
		}
		#endregion // sequence accessor methods

		#region sequence collection
        public sequenceCollection	Mysequences = new sequenceCollection( );

        public class sequenceCollection: IEnumerable
        {
            GivenType parent;
            public GivenType Parent
			{
				set
				{
					parent = value;
				}
			}
			public sequenceEnumerator GetEnumerator() 
			{
				return new sequenceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class sequenceEnumerator: IEnumerator 
        {
			int nIndex;
			GivenType parent;
			public sequenceEnumerator(GivenType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.sequenceCount );
			}
			public sequenceType2  Current 
			{
				get 
				{
					return(parent.GetsequenceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // sequence collection

		public void AddTextNode(SchemaString newValue)
		{
			AppendDomChild(NodeType.Text, "", "", newValue.ToString());
		}
		public void AddProcessingInstruction(SchemaString name, SchemaString newValue)
		{
			AppendDomChild(NodeType.ProcessingInstruction , "", name.ToString(), newValue.ToString());
		}
		public void AddCDataNode(SchemaString newValue)
		{
			AppendDomChild(NodeType.CData, "", "", newValue.ToString());
		}
		public void AddComment(SchemaString newValue)
		{
			AppendDomChild(NodeType.Comment, "", "", newValue.ToString());
		}
        private void SetCollectionParents()
        {
            Mysequences.Parent = this; 
	}
}
}
