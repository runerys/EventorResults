//
// PersonIdType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class PersonIdType : Altova.Xml.Node
	{
		#region Forward constructors

		public PersonIdType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public PersonIdType(XmlNode node) : base(node) { SetCollectionParents(); }
		public PersonIdType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public PersonIdType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		#region Value accessor methods
		public SchemaString GetValue()
		{
			return new SchemaString(GetDomNodeValue(domNode));
		}

		public void SetValue(ISchemaType newValue)
		{
			SetDomNodeValue(domNode, newValue.ToString());
		}

		public void Assign(ISchemaType newValue)
		{
			SetValue(newValue);
		}

		public SchemaString Value
		{
			get
			{
				return new SchemaString(GetDomNodeValue(domNode));
			}
			set
			{
				SetDomNodeValue(domNode, value.ToString());
			}
		}
		#endregion // Value accessor methods

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "type" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "type", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "idManager" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "idManager", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}



		#region type2 accessor methods
		public static int Gettype2MinCount()
		{
			return 1;
		}

		public static int type2MinCount
		{
			get
			{
				return 1;
			}
		}

		public static int Gettype2MaxCount()
		{
			return 1;
		}

		public static int type2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Gettype2Count()
		{
			return DomChildCount(NodeType.Attribute, "", "type");
		}

		public int type2Count
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "type");
			}
		}

		public bool Hastype2()
		{
			return HasDomChild(NodeType.Attribute, "", "type");
		}

		public typeType Newtype2()
		{
			return new typeType();
		}

		public typeType Gettype2At(int index)
		{
			return new typeType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "type", index)));
		}

		public XmlNode GetStartingtype2Cursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "type" );
		}

		public XmlNode GetAdvancedtype2Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "type", curNode );
		}

		public typeType Gettype2ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new typeType( curNode.Value );
		}


		public typeType Gettype2()
		{
			return Gettype2At(0);
		}

		public typeType type2
		{
			get
			{
				return Gettype2At(0);
			}
		}

		public void Removetype2At(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "type", index);
		}

		public void Removetype2()
		{
			while (Hastype2())
				Removetype2At(0);
		}

		public void Addtype2(typeType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "type", newValue.ToString());
		}

		public void Inserttype2At(typeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "type", index, newValue.ToString());
		}

		public void Replacetype2At(typeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "type", index, newValue.ToString());
		}
		#endregion // type2 accessor methods

		#region type2 collection
        public type2Collection	Mytype2s = new type2Collection( );

        public class type2Collection: IEnumerable
        {
            PersonIdType parent;
            public PersonIdType Parent
			{
				set
				{
					parent = value;
				}
			}
			public type2Enumerator GetEnumerator() 
			{
				return new type2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class type2Enumerator: IEnumerator 
        {
			int nIndex;
			PersonIdType parent;
			public type2Enumerator(PersonIdType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.type2Count );
			}
			public typeType  Current 
			{
				get 
				{
					return(parent.Gettype2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // type2 collection

		#region idManager accessor methods
		public static int GetidManagerMinCount()
		{
			return 1;
		}

		public static int idManagerMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetidManagerMaxCount()
		{
			return 1;
		}

		public static int idManagerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetidManagerCount()
		{
			return DomChildCount(NodeType.Attribute, "", "idManager");
		}

		public int idManagerCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "idManager");
			}
		}

		public bool HasidManager()
		{
			return HasDomChild(NodeType.Attribute, "", "idManager");
		}

		public idManagerType NewidManager()
		{
			return new idManagerType();
		}

		public idManagerType GetidManagerAt(int index)
		{
			return new idManagerType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "idManager", index)));
		}

		public XmlNode GetStartingidManagerCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "idManager" );
		}

		public XmlNode GetAdvancedidManagerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "idManager", curNode );
		}

		public idManagerType GetidManagerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new idManagerType( curNode.Value );
		}


		public idManagerType GetidManager()
		{
			return GetidManagerAt(0);
		}

		public idManagerType idManager
		{
			get
			{
				return GetidManagerAt(0);
			}
		}

		public void RemoveidManagerAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "idManager", index);
		}

		public void RemoveidManager()
		{
			while (HasidManager())
				RemoveidManagerAt(0);
		}

		public void AddidManager(idManagerType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "idManager", newValue.ToString());
		}

		public void InsertidManagerAt(idManagerType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "idManager", index, newValue.ToString());
		}

		public void ReplaceidManagerAt(idManagerType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "idManager", index, newValue.ToString());
		}
		#endregion // idManager accessor methods

		#region idManager collection
        public idManagerCollection	MyidManagers = new idManagerCollection( );

        public class idManagerCollection: IEnumerable
        {
            PersonIdType parent;
            public PersonIdType Parent
			{
				set
				{
					parent = value;
				}
			}
			public idManagerEnumerator GetEnumerator() 
			{
				return new idManagerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class idManagerEnumerator: IEnumerator 
        {
			int nIndex;
			PersonIdType parent;
			public idManagerEnumerator(PersonIdType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.idManagerCount );
			}
			public idManagerType  Current 
			{
				get 
				{
					return(parent.GetidManagerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // idManager collection

		public void AddTextNode(SchemaString newValue)
		{
			AppendDomChild(NodeType.Text, "", "", newValue.ToString());
		}
		public void AddProcessingInstruction(SchemaString name, SchemaString newValue)
		{
			AppendDomChild(NodeType.ProcessingInstruction , "", name.ToString(), newValue.ToString());
		}
		public void AddCDataNode(SchemaString newValue)
		{
			AppendDomChild(NodeType.CData, "", "", newValue.ToString());
		}
		public void AddComment(SchemaString newValue)
		{
			AppendDomChild(NodeType.Comment, "", "", newValue.ToString());
		}
        private void SetCollectionParents()
        {
            Mytype2s.Parent = this; 
            MyidManagers.Parent = this; 
	}
}
}
