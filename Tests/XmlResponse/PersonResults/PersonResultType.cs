//
// PersonResultType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class PersonResultType : Altova.Xml.Node
	{
		#region Forward constructors

		public PersonResultType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public PersonResultType(XmlNode node) : base(node) { SetCollectionParents(); }
		public PersonResultType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public PersonResultType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Person" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Person", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new PersonType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Organisation" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Organisation", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new OrganisationType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Result" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Result", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ResultType(DOMNode).AdjustPrefix();
			}
		}



		#region Person accessor methods
		public static int GetPersonMinCount()
		{
			return 1;
		}

		public static int PersonMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPersonMaxCount()
		{
			return 1;
		}

		public static int PersonMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPersonCount()
		{
			return DomChildCount(NodeType.Element, "", "Person");
		}

		public int PersonCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Person");
			}
		}

		public bool HasPerson()
		{
			return HasDomChild(NodeType.Element, "", "Person");
		}

		public PersonType NewPerson()
		{
			return new PersonType(domNode.OwnerDocument.CreateElement("Person", ""));
		}

		public PersonType GetPersonAt(int index)
		{
			return new PersonType(GetDomChildAt(NodeType.Element, "", "Person", index));
		}

		public XmlNode GetStartingPersonCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Person" );
		}

		public XmlNode GetAdvancedPersonCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Person", curNode );
		}

		public PersonType GetPersonValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonType( curNode );
		}


		public PersonType GetPerson()
		{
			return GetPersonAt(0);
		}

		public PersonType Person
		{
			get
			{
				return GetPersonAt(0);
			}
		}

		public void RemovePersonAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Person", index);
		}

		public void RemovePerson()
		{
			while (HasPerson())
				RemovePersonAt(0);
		}

		public void AddPerson(PersonType newValue)
		{
			AppendDomElement("", "Person", newValue);
		}

		public void InsertPersonAt(PersonType newValue, int index)
		{
			InsertDomElementAt("", "Person", index, newValue);
		}

		public void ReplacePersonAt(PersonType newValue, int index)
		{
			ReplaceDomElementAt("", "Person", index, newValue);
		}
		#endregion // Person accessor methods

		#region Person collection
        public PersonCollection	MyPersons = new PersonCollection( );

        public class PersonCollection: IEnumerable
        {
            PersonResultType parent;
            public PersonResultType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PersonEnumerator GetEnumerator() 
			{
				return new PersonEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PersonEnumerator: IEnumerator 
        {
			int nIndex;
			PersonResultType parent;
			public PersonEnumerator(PersonResultType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PersonCount );
			}
			public PersonType  Current 
			{
				get 
				{
					return(parent.GetPersonAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Person collection

		#region Organisation accessor methods
		public static int GetOrganisationMinCount()
		{
			return 1;
		}

		public static int OrganisationMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetOrganisationMaxCount()
		{
			return 1;
		}

		public static int OrganisationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOrganisationCount()
		{
			return DomChildCount(NodeType.Element, "", "Organisation");
		}

		public int OrganisationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Organisation");
			}
		}

		public bool HasOrganisation()
		{
			return HasDomChild(NodeType.Element, "", "Organisation");
		}

		public OrganisationType NewOrganisation()
		{
			return new OrganisationType(domNode.OwnerDocument.CreateElement("Organisation", ""));
		}

		public OrganisationType GetOrganisationAt(int index)
		{
			return new OrganisationType(GetDomChildAt(NodeType.Element, "", "Organisation", index));
		}

		public XmlNode GetStartingOrganisationCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Organisation" );
		}

		public XmlNode GetAdvancedOrganisationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Organisation", curNode );
		}

		public OrganisationType GetOrganisationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new OrganisationType( curNode );
		}


		public OrganisationType GetOrganisation()
		{
			return GetOrganisationAt(0);
		}

		public OrganisationType Organisation
		{
			get
			{
				return GetOrganisationAt(0);
			}
		}

		public void RemoveOrganisationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Organisation", index);
		}

		public void RemoveOrganisation()
		{
			while (HasOrganisation())
				RemoveOrganisationAt(0);
		}

		public void AddOrganisation(OrganisationType newValue)
		{
			AppendDomElement("", "Organisation", newValue);
		}

		public void InsertOrganisationAt(OrganisationType newValue, int index)
		{
			InsertDomElementAt("", "Organisation", index, newValue);
		}

		public void ReplaceOrganisationAt(OrganisationType newValue, int index)
		{
			ReplaceDomElementAt("", "Organisation", index, newValue);
		}
		#endregion // Organisation accessor methods

		#region Organisation collection
        public OrganisationCollection	MyOrganisations = new OrganisationCollection( );

        public class OrganisationCollection: IEnumerable
        {
            PersonResultType parent;
            public PersonResultType Parent
			{
				set
				{
					parent = value;
				}
			}
			public OrganisationEnumerator GetEnumerator() 
			{
				return new OrganisationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class OrganisationEnumerator: IEnumerator 
        {
			int nIndex;
			PersonResultType parent;
			public OrganisationEnumerator(PersonResultType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.OrganisationCount );
			}
			public OrganisationType  Current 
			{
				get 
				{
					return(parent.GetOrganisationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Organisation collection

		#region Result accessor methods
		public static int GetResultMinCount()
		{
			return 1;
		}

		public static int ResultMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetResultMaxCount()
		{
			return 1;
		}

		public static int ResultMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetResultCount()
		{
			return DomChildCount(NodeType.Element, "", "Result");
		}

		public int ResultCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Result");
			}
		}

		public bool HasResult()
		{
			return HasDomChild(NodeType.Element, "", "Result");
		}

		public ResultType NewResult()
		{
			return new ResultType(domNode.OwnerDocument.CreateElement("Result", ""));
		}

		public ResultType GetResultAt(int index)
		{
			return new ResultType(GetDomChildAt(NodeType.Element, "", "Result", index));
		}

		public XmlNode GetStartingResultCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Result" );
		}

		public XmlNode GetAdvancedResultCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Result", curNode );
		}

		public ResultType GetResultValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ResultType( curNode );
		}


		public ResultType GetResult()
		{
			return GetResultAt(0);
		}

		public ResultType Result
		{
			get
			{
				return GetResultAt(0);
			}
		}

		public void RemoveResultAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Result", index);
		}

		public void RemoveResult()
		{
			while (HasResult())
				RemoveResultAt(0);
		}

		public void AddResult(ResultType newValue)
		{
			AppendDomElement("", "Result", newValue);
		}

		public void InsertResultAt(ResultType newValue, int index)
		{
			InsertDomElementAt("", "Result", index, newValue);
		}

		public void ReplaceResultAt(ResultType newValue, int index)
		{
			ReplaceDomElementAt("", "Result", index, newValue);
		}
		#endregion // Result accessor methods

		#region Result collection
        public ResultCollection	MyResults = new ResultCollection( );

        public class ResultCollection: IEnumerable
        {
            PersonResultType parent;
            public PersonResultType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ResultEnumerator GetEnumerator() 
			{
				return new ResultEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ResultEnumerator: IEnumerator 
        {
			int nIndex;
			PersonResultType parent;
			public ResultEnumerator(PersonResultType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ResultCount );
			}
			public ResultType  Current 
			{
				get 
				{
					return(parent.GetResultAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Result collection

        private void SetCollectionParents()
        {
            MyPersons.Parent = this; 
            MyOrganisations.Parent = this; 
            MyResults.Parent = this; 
	}
}
}
