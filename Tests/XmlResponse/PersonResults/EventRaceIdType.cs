//
// EventRaceIdType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using Altova.Types;

namespace PersonResults
{

	public class EventRaceIdType : SchemaInt
	{
		public static string[] sEnumValues = {
			"1538",
			"1585",
			"1586",
			"1867",
			"2226",
			"467",
			"538",
			"541",
			"555",
			"556",
			"557",
			"558",
			"863",
			"882",
		};

		public enum EnumValues
		{
			e1538 = 0, /* 1538 */
			e1585 = 1, /* 1585 */
			e1586 = 2, /* 1586 */
			e1867 = 3, /* 1867 */
			e2226 = 4, /* 2226 */
			e467 = 5, /* 467 */
			e538 = 6, /* 538 */
			e541 = 7, /* 541 */
			e555 = 8, /* 555 */
			e556 = 9, /* 556 */
			e557 = 10, /* 557 */
			e558 = 11, /* 558 */
			e863 = 12, /* 863 */
			e882 = 13, /* 882 */
			EnumValueCount
		};

		public EventRaceIdType() : base()
		{
		}

		public EventRaceIdType(string newValue) : base(newValue)
		{
			Validate();
		}

		public EventRaceIdType(SchemaInt newValue) : base(newValue)
		{
			Validate();
		}

		public static int GetEnumerationCount()
		{
			return sEnumValues.Length;
		}

		public static string GetEnumerationValue(int index)
		{
			return sEnumValues[index];
		}

		public static bool IsValidEnumerationValue(string val)
		{
			foreach (string s in sEnumValues)
			{
				if (val == s)
					return true;
			}
			return false;
		}

		public void Validate()
		{

			if (!IsValidEnumerationValue(ToString()))
				throw new System.Exception("Value of EventRaceId is invalid.");
		}
	}
}
