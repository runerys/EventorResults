//
// PersonNameType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class PersonNameType : Altova.Xml.Node
	{
		#region Forward constructors

		public PersonNameType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public PersonNameType(XmlNode node) : base(node) { SetCollectionParents(); }
		public PersonNameType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public PersonNameType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Family" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Family", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Given" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Given", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new GivenType(DOMNode).AdjustPrefix();
			}
		}



		#region Family accessor methods
		public static int GetFamilyMinCount()
		{
			return 1;
		}

		public static int FamilyMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetFamilyMaxCount()
		{
			return 1;
		}

		public static int FamilyMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFamilyCount()
		{
			return DomChildCount(NodeType.Element, "", "Family");
		}

		public int FamilyCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Family");
			}
		}

		public bool HasFamily()
		{
			return HasDomChild(NodeType.Element, "", "Family");
		}

		public FamilyType NewFamily()
		{
			return new FamilyType();
		}

		public FamilyType GetFamilyAt(int index)
		{
			return new FamilyType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Family", index)));
		}

		public XmlNode GetStartingFamilyCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Family" );
		}

		public XmlNode GetAdvancedFamilyCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Family", curNode );
		}

		public FamilyType GetFamilyValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new FamilyType( curNode.InnerText );
		}


		public FamilyType GetFamily()
		{
			return GetFamilyAt(0);
		}

		public FamilyType Family
		{
			get
			{
				return GetFamilyAt(0);
			}
		}

		public void RemoveFamilyAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Family", index);
		}

		public void RemoveFamily()
		{
			while (HasFamily())
				RemoveFamilyAt(0);
		}

		public void AddFamily(FamilyType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "Family", newValue.ToString());
		}

		public void InsertFamilyAt(FamilyType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Family", index, newValue.ToString());
		}

		public void ReplaceFamilyAt(FamilyType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Family", index, newValue.ToString());
		}
		#endregion // Family accessor methods

		#region Family collection
        public FamilyCollection	MyFamilys = new FamilyCollection( );

        public class FamilyCollection: IEnumerable
        {
            PersonNameType parent;
            public PersonNameType Parent
			{
				set
				{
					parent = value;
				}
			}
			public FamilyEnumerator GetEnumerator() 
			{
				return new FamilyEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FamilyEnumerator: IEnumerator 
        {
			int nIndex;
			PersonNameType parent;
			public FamilyEnumerator(PersonNameType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FamilyCount );
			}
			public FamilyType  Current 
			{
				get 
				{
					return(parent.GetFamilyAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Family collection

		#region Given accessor methods
		public static int GetGivenMinCount()
		{
			return 1;
		}

		public static int GivenMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetGivenMaxCount()
		{
			return 1;
		}

		public static int GivenMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGivenCount()
		{
			return DomChildCount(NodeType.Element, "", "Given");
		}

		public int GivenCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Given");
			}
		}

		public bool HasGiven()
		{
			return HasDomChild(NodeType.Element, "", "Given");
		}

		public GivenType NewGiven()
		{
			return new GivenType(domNode.OwnerDocument.CreateElement("Given", ""));
		}

		public GivenType GetGivenAt(int index)
		{
			return new GivenType(GetDomChildAt(NodeType.Element, "", "Given", index));
		}

		public XmlNode GetStartingGivenCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Given" );
		}

		public XmlNode GetAdvancedGivenCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Given", curNode );
		}

		public GivenType GetGivenValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new GivenType( curNode );
		}


		public GivenType GetGiven()
		{
			return GetGivenAt(0);
		}

		public GivenType Given
		{
			get
			{
				return GetGivenAt(0);
			}
		}

		public void RemoveGivenAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Given", index);
		}

		public void RemoveGiven()
		{
			while (HasGiven())
				RemoveGivenAt(0);
		}

		public void AddGiven(GivenType newValue)
		{
			AppendDomElement("", "Given", newValue);
		}

		public void InsertGivenAt(GivenType newValue, int index)
		{
			InsertDomElementAt("", "Given", index, newValue);
		}

		public void ReplaceGivenAt(GivenType newValue, int index)
		{
			ReplaceDomElementAt("", "Given", index, newValue);
		}
		#endregion // Given accessor methods

		#region Given collection
        public GivenCollection	MyGivens = new GivenCollection( );

        public class GivenCollection: IEnumerable
        {
            PersonNameType parent;
            public PersonNameType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GivenEnumerator GetEnumerator() 
			{
				return new GivenEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GivenEnumerator: IEnumerator 
        {
			int nIndex;
			PersonNameType parent;
			public GivenEnumerator(PersonNameType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GivenCount );
			}
			public GivenType  Current 
			{
				get 
				{
					return(parent.GetGivenAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Given collection

        private void SetCollectionParents()
        {
            MyFamilys.Parent = this; 
            MyGivens.Parent = this; 
	}
}
}
