//
// OrganisationType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class OrganisationType : Altova.Xml.Node
	{
		#region Forward constructors

		public OrganisationType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public OrganisationType(XmlNode node) : base(node) { SetCollectionParents(); }
		public OrganisationType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public OrganisationType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "OrganisationId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "OrganisationId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new NameType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ShortName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ShortName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ShortNameType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Country" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Country", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new CountryType(DOMNode).AdjustPrefix();
			}
		}



		#region OrganisationId accessor methods
		public static int GetOrganisationIdMinCount()
		{
			return 1;
		}

		public static int OrganisationIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetOrganisationIdMaxCount()
		{
			return 1;
		}

		public static int OrganisationIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOrganisationIdCount()
		{
			return DomChildCount(NodeType.Element, "", "OrganisationId");
		}

		public int OrganisationIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "OrganisationId");
			}
		}

		public bool HasOrganisationId()
		{
			return HasDomChild(NodeType.Element, "", "OrganisationId");
		}

		public OrganisationIdType NewOrganisationId()
		{
			return new OrganisationIdType();
		}

		public OrganisationIdType GetOrganisationIdAt(int index)
		{
			return new OrganisationIdType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "OrganisationId", index)));
		}

		public XmlNode GetStartingOrganisationIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "OrganisationId" );
		}

		public XmlNode GetAdvancedOrganisationIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "OrganisationId", curNode );
		}

		public OrganisationIdType GetOrganisationIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new OrganisationIdType( curNode.InnerText );
		}


		public OrganisationIdType GetOrganisationId()
		{
			return GetOrganisationIdAt(0);
		}

		public OrganisationIdType OrganisationId
		{
			get
			{
				return GetOrganisationIdAt(0);
			}
		}

		public void RemoveOrganisationIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "OrganisationId", index);
		}

		public void RemoveOrganisationId()
		{
			while (HasOrganisationId())
				RemoveOrganisationIdAt(0);
		}

		public void AddOrganisationId(OrganisationIdType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "OrganisationId", newValue.ToString());
		}

		public void InsertOrganisationIdAt(OrganisationIdType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "OrganisationId", index, newValue.ToString());
		}

		public void ReplaceOrganisationIdAt(OrganisationIdType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "OrganisationId", index, newValue.ToString());
		}
		#endregion // OrganisationId accessor methods

		#region OrganisationId collection
        public OrganisationIdCollection	MyOrganisationIds = new OrganisationIdCollection( );

        public class OrganisationIdCollection: IEnumerable
        {
            OrganisationType parent;
            public OrganisationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public OrganisationIdEnumerator GetEnumerator() 
			{
				return new OrganisationIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class OrganisationIdEnumerator: IEnumerator 
        {
			int nIndex;
			OrganisationType parent;
			public OrganisationIdEnumerator(OrganisationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.OrganisationIdCount );
			}
			public OrganisationIdType  Current 
			{
				get 
				{
					return(parent.GetOrganisationIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // OrganisationId collection

		#region Name accessor methods
		public static int GetNameMinCount()
		{
			return 1;
		}

		public static int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNameMaxCount()
		{
			return 1;
		}

		public static int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "", "Name");
		}

		public NameType NewName()
		{
			return new NameType(domNode.OwnerDocument.CreateElement("Name", ""));
		}

		public NameType GetNameAt(int index)
		{
			return new NameType(GetDomChildAt(NodeType.Element, "", "Name", index));
		}

		public XmlNode GetStartingNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Name", curNode );
		}

		public NameType GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new NameType( curNode );
		}


		public NameType GetName()
		{
			return GetNameAt(0);
		}

		public NameType Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Name", index);
		}

		public void RemoveName()
		{
			while (HasName())
				RemoveNameAt(0);
		}

		public void AddName(NameType newValue)
		{
			AppendDomElement("", "Name", newValue);
		}

		public void InsertNameAt(NameType newValue, int index)
		{
			InsertDomElementAt("", "Name", index, newValue);
		}

		public void ReplaceNameAt(NameType newValue, int index)
		{
			ReplaceDomElementAt("", "Name", index, newValue);
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            OrganisationType parent;
            public OrganisationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			OrganisationType parent;
			public NameEnumerator(OrganisationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public NameType  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region ShortName accessor methods
		public static int GetShortNameMinCount()
		{
			return 1;
		}

		public static int ShortNameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetShortNameMaxCount()
		{
			return 1;
		}

		public static int ShortNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShortNameCount()
		{
			return DomChildCount(NodeType.Element, "", "ShortName");
		}

		public int ShortNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ShortName");
			}
		}

		public bool HasShortName()
		{
			return HasDomChild(NodeType.Element, "", "ShortName");
		}

		public ShortNameType NewShortName()
		{
			return new ShortNameType(domNode.OwnerDocument.CreateElement("ShortName", ""));
		}

		public ShortNameType GetShortNameAt(int index)
		{
			return new ShortNameType(GetDomChildAt(NodeType.Element, "", "ShortName", index));
		}

		public XmlNode GetStartingShortNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ShortName" );
		}

		public XmlNode GetAdvancedShortNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ShortName", curNode );
		}

		public ShortNameType GetShortNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ShortNameType( curNode );
		}


		public ShortNameType GetShortName()
		{
			return GetShortNameAt(0);
		}

		public ShortNameType ShortName
		{
			get
			{
				return GetShortNameAt(0);
			}
		}

		public void RemoveShortNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ShortName", index);
		}

		public void RemoveShortName()
		{
			while (HasShortName())
				RemoveShortNameAt(0);
		}

		public void AddShortName(ShortNameType newValue)
		{
			AppendDomElement("", "ShortName", newValue);
		}

		public void InsertShortNameAt(ShortNameType newValue, int index)
		{
			InsertDomElementAt("", "ShortName", index, newValue);
		}

		public void ReplaceShortNameAt(ShortNameType newValue, int index)
		{
			ReplaceDomElementAt("", "ShortName", index, newValue);
		}
		#endregion // ShortName accessor methods

		#region ShortName collection
        public ShortNameCollection	MyShortNames = new ShortNameCollection( );

        public class ShortNameCollection: IEnumerable
        {
            OrganisationType parent;
            public OrganisationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShortNameEnumerator GetEnumerator() 
			{
				return new ShortNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShortNameEnumerator: IEnumerator 
        {
			int nIndex;
			OrganisationType parent;
			public ShortNameEnumerator(OrganisationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShortNameCount );
			}
			public ShortNameType  Current 
			{
				get 
				{
					return(parent.GetShortNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShortName collection

		#region Country accessor methods
		public static int GetCountryMinCount()
		{
			return 0;
		}

		public static int CountryMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetCountryMaxCount()
		{
			return 1;
		}

		public static int CountryMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCountryCount()
		{
			return DomChildCount(NodeType.Element, "", "Country");
		}

		public int CountryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Country");
			}
		}

		public bool HasCountry()
		{
			return HasDomChild(NodeType.Element, "", "Country");
		}

		public CountryType NewCountry()
		{
			return new CountryType(domNode.OwnerDocument.CreateElement("Country", ""));
		}

		public CountryType GetCountryAt(int index)
		{
			return new CountryType(GetDomChildAt(NodeType.Element, "", "Country", index));
		}

		public XmlNode GetStartingCountryCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Country" );
		}

		public XmlNode GetAdvancedCountryCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Country", curNode );
		}

		public CountryType GetCountryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CountryType( curNode );
		}


		public CountryType GetCountry()
		{
			return GetCountryAt(0);
		}

		public CountryType Country
		{
			get
			{
				return GetCountryAt(0);
			}
		}

		public void RemoveCountryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Country", index);
		}

		public void RemoveCountry()
		{
			while (HasCountry())
				RemoveCountryAt(0);
		}

		public void AddCountry(CountryType newValue)
		{
			AppendDomElement("", "Country", newValue);
		}

		public void InsertCountryAt(CountryType newValue, int index)
		{
			InsertDomElementAt("", "Country", index, newValue);
		}

		public void ReplaceCountryAt(CountryType newValue, int index)
		{
			ReplaceDomElementAt("", "Country", index, newValue);
		}
		#endregion // Country accessor methods

		#region Country collection
        public CountryCollection	MyCountrys = new CountryCollection( );

        public class CountryCollection: IEnumerable
        {
            OrganisationType parent;
            public OrganisationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CountryEnumerator GetEnumerator() 
			{
				return new CountryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CountryEnumerator: IEnumerator 
        {
			int nIndex;
			OrganisationType parent;
			public CountryEnumerator(OrganisationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CountryCount );
			}
			public CountryType  Current 
			{
				get 
				{
					return(parent.GetCountryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Country collection

        private void SetCollectionParents()
        {
            MyOrganisationIds.Parent = this; 
            MyNames.Parent = this; 
            MyShortNames.Parent = this; 
            MyCountrys.Parent = this; 
	}
}
}
