//
// EventType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class EventType : Altova.Xml.Node
	{
		#region Forward constructors

		public EventType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public EventType(XmlNode node) : base(node) { SetCollectionParents(); }
		public EventType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public EventType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "eventForm" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "eventForm", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EventId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EventId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new NameType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EventClassificationId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EventClassificationId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EventStatusId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EventStatusId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "StartDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "StartDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new StartDateType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "FinishDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "FinishDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new FinishDateType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "WebURL" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "WebURL", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Comment" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Comment", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new CommentType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "PunchingUnitType" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "PunchingUnitType", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new PunchingUnitTypeType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ModifyDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ModifyDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ModifyDateType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ModifiedBy" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ModifiedBy", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ModifiedByType(DOMNode).AdjustPrefix();
			}
		}



		#region eventForm accessor methods
		public static int GeteventFormMinCount()
		{
			return 1;
		}

		public static int eventFormMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GeteventFormMaxCount()
		{
			return 1;
		}

		public static int eventFormMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GeteventFormCount()
		{
			return DomChildCount(NodeType.Attribute, "", "eventForm");
		}

		public int eventFormCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "eventForm");
			}
		}

		public bool HaseventForm()
		{
			return HasDomChild(NodeType.Attribute, "", "eventForm");
		}

		public eventFormType NeweventForm()
		{
			return new eventFormType();
		}

		public eventFormType GeteventFormAt(int index)
		{
			return new eventFormType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "eventForm", index)));
		}

		public XmlNode GetStartingeventFormCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "eventForm" );
		}

		public XmlNode GetAdvancedeventFormCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "eventForm", curNode );
		}

		public eventFormType GeteventFormValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new eventFormType( curNode.Value );
		}


		public eventFormType GeteventForm()
		{
			return GeteventFormAt(0);
		}

		public eventFormType eventForm
		{
			get
			{
				return GeteventFormAt(0);
			}
		}

		public void RemoveeventFormAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "eventForm", index);
		}

		public void RemoveeventForm()
		{
			while (HaseventForm())
				RemoveeventFormAt(0);
		}

		public void AddeventForm(eventFormType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "eventForm", newValue.ToString());
		}

		public void InserteventFormAt(eventFormType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "eventForm", index, newValue.ToString());
		}

		public void ReplaceeventFormAt(eventFormType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "eventForm", index, newValue.ToString());
		}
		#endregion // eventForm accessor methods

		#region eventForm collection
        public eventFormCollection	MyeventForms = new eventFormCollection( );

        public class eventFormCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public eventFormEnumerator GetEnumerator() 
			{
				return new eventFormEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class eventFormEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public eventFormEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.eventFormCount );
			}
			public eventFormType  Current 
			{
				get 
				{
					return(parent.GeteventFormAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // eventForm collection

		#region EventId accessor methods
		public static int GetEventIdMinCount()
		{
			return 1;
		}

		public static int EventIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEventIdMaxCount()
		{
			return 1;
		}

		public static int EventIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEventIdCount()
		{
			return DomChildCount(NodeType.Element, "", "EventId");
		}

		public int EventIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EventId");
			}
		}

		public bool HasEventId()
		{
			return HasDomChild(NodeType.Element, "", "EventId");
		}

		public EventIdType NewEventId()
		{
			return new EventIdType();
		}

		public EventIdType GetEventIdAt(int index)
		{
			return new EventIdType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "EventId", index)));
		}

		public XmlNode GetStartingEventIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EventId" );
		}

		public XmlNode GetAdvancedEventIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EventId", curNode );
		}

		public EventIdType GetEventIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EventIdType( curNode.InnerText );
		}


		public EventIdType GetEventId()
		{
			return GetEventIdAt(0);
		}

		public EventIdType EventId
		{
			get
			{
				return GetEventIdAt(0);
			}
		}

		public void RemoveEventIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EventId", index);
		}

		public void RemoveEventId()
		{
			while (HasEventId())
				RemoveEventIdAt(0);
		}

		public void AddEventId(EventIdType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "EventId", newValue.ToString());
		}

		public void InsertEventIdAt(EventIdType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "EventId", index, newValue.ToString());
		}

		public void ReplaceEventIdAt(EventIdType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "EventId", index, newValue.ToString());
		}
		#endregion // EventId accessor methods

		#region EventId collection
        public EventIdCollection	MyEventIds = new EventIdCollection( );

        public class EventIdCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EventIdEnumerator GetEnumerator() 
			{
				return new EventIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EventIdEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public EventIdEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EventIdCount );
			}
			public EventIdType  Current 
			{
				get 
				{
					return(parent.GetEventIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EventId collection

		#region Name accessor methods
		public static int GetNameMinCount()
		{
			return 1;
		}

		public static int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNameMaxCount()
		{
			return 1;
		}

		public static int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "", "Name");
		}

		public NameType NewName()
		{
			return new NameType(domNode.OwnerDocument.CreateElement("Name", ""));
		}

		public NameType GetNameAt(int index)
		{
			return new NameType(GetDomChildAt(NodeType.Element, "", "Name", index));
		}

		public XmlNode GetStartingNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Name", curNode );
		}

		public NameType GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new NameType( curNode );
		}


		public NameType GetName()
		{
			return GetNameAt(0);
		}

		public NameType Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Name", index);
		}

		public void RemoveName()
		{
			while (HasName())
				RemoveNameAt(0);
		}

		public void AddName(NameType newValue)
		{
			AppendDomElement("", "Name", newValue);
		}

		public void InsertNameAt(NameType newValue, int index)
		{
			InsertDomElementAt("", "Name", index, newValue);
		}

		public void ReplaceNameAt(NameType newValue, int index)
		{
			ReplaceDomElementAt("", "Name", index, newValue);
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public NameEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public NameType  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region EventClassificationId accessor methods
		public static int GetEventClassificationIdMinCount()
		{
			return 1;
		}

		public static int EventClassificationIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEventClassificationIdMaxCount()
		{
			return 1;
		}

		public static int EventClassificationIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEventClassificationIdCount()
		{
			return DomChildCount(NodeType.Element, "", "EventClassificationId");
		}

		public int EventClassificationIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EventClassificationId");
			}
		}

		public bool HasEventClassificationId()
		{
			return HasDomChild(NodeType.Element, "", "EventClassificationId");
		}

		public EventClassificationIdType NewEventClassificationId()
		{
			return new EventClassificationIdType();
		}

		public EventClassificationIdType GetEventClassificationIdAt(int index)
		{
			return new EventClassificationIdType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "EventClassificationId", index)));
		}

		public XmlNode GetStartingEventClassificationIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EventClassificationId" );
		}

		public XmlNode GetAdvancedEventClassificationIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EventClassificationId", curNode );
		}

		public EventClassificationIdType GetEventClassificationIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EventClassificationIdType( curNode.InnerText );
		}


		public EventClassificationIdType GetEventClassificationId()
		{
			return GetEventClassificationIdAt(0);
		}

		public EventClassificationIdType EventClassificationId
		{
			get
			{
				return GetEventClassificationIdAt(0);
			}
		}

		public void RemoveEventClassificationIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EventClassificationId", index);
		}

		public void RemoveEventClassificationId()
		{
			while (HasEventClassificationId())
				RemoveEventClassificationIdAt(0);
		}

		public void AddEventClassificationId(EventClassificationIdType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "EventClassificationId", newValue.ToString());
		}

		public void InsertEventClassificationIdAt(EventClassificationIdType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "EventClassificationId", index, newValue.ToString());
		}

		public void ReplaceEventClassificationIdAt(EventClassificationIdType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "EventClassificationId", index, newValue.ToString());
		}
		#endregion // EventClassificationId accessor methods

		#region EventClassificationId collection
        public EventClassificationIdCollection	MyEventClassificationIds = new EventClassificationIdCollection( );

        public class EventClassificationIdCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EventClassificationIdEnumerator GetEnumerator() 
			{
				return new EventClassificationIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EventClassificationIdEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public EventClassificationIdEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EventClassificationIdCount );
			}
			public EventClassificationIdType  Current 
			{
				get 
				{
					return(parent.GetEventClassificationIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EventClassificationId collection

		#region EventStatusId accessor methods
		public static int GetEventStatusIdMinCount()
		{
			return 1;
		}

		public static int EventStatusIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEventStatusIdMaxCount()
		{
			return 1;
		}

		public static int EventStatusIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEventStatusIdCount()
		{
			return DomChildCount(NodeType.Element, "", "EventStatusId");
		}

		public int EventStatusIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EventStatusId");
			}
		}

		public bool HasEventStatusId()
		{
			return HasDomChild(NodeType.Element, "", "EventStatusId");
		}

		public EventStatusIdType NewEventStatusId()
		{
			return new EventStatusIdType();
		}

		public EventStatusIdType GetEventStatusIdAt(int index)
		{
			return new EventStatusIdType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "EventStatusId", index)));
		}

		public XmlNode GetStartingEventStatusIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EventStatusId" );
		}

		public XmlNode GetAdvancedEventStatusIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EventStatusId", curNode );
		}

		public EventStatusIdType GetEventStatusIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EventStatusIdType( curNode.InnerText );
		}


		public EventStatusIdType GetEventStatusId()
		{
			return GetEventStatusIdAt(0);
		}

		public EventStatusIdType EventStatusId
		{
			get
			{
				return GetEventStatusIdAt(0);
			}
		}

		public void RemoveEventStatusIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EventStatusId", index);
		}

		public void RemoveEventStatusId()
		{
			while (HasEventStatusId())
				RemoveEventStatusIdAt(0);
		}

		public void AddEventStatusId(EventStatusIdType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "EventStatusId", newValue.ToString());
		}

		public void InsertEventStatusIdAt(EventStatusIdType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "EventStatusId", index, newValue.ToString());
		}

		public void ReplaceEventStatusIdAt(EventStatusIdType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "EventStatusId", index, newValue.ToString());
		}
		#endregion // EventStatusId accessor methods

		#region EventStatusId collection
        public EventStatusIdCollection	MyEventStatusIds = new EventStatusIdCollection( );

        public class EventStatusIdCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EventStatusIdEnumerator GetEnumerator() 
			{
				return new EventStatusIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EventStatusIdEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public EventStatusIdEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EventStatusIdCount );
			}
			public EventStatusIdType  Current 
			{
				get 
				{
					return(parent.GetEventStatusIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EventStatusId collection

		#region StartDate accessor methods
		public static int GetStartDateMinCount()
		{
			return 1;
		}

		public static int StartDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStartDateMaxCount()
		{
			return 1;
		}

		public static int StartDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStartDateCount()
		{
			return DomChildCount(NodeType.Element, "", "StartDate");
		}

		public int StartDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "StartDate");
			}
		}

		public bool HasStartDate()
		{
			return HasDomChild(NodeType.Element, "", "StartDate");
		}

		public StartDateType NewStartDate()
		{
			return new StartDateType(domNode.OwnerDocument.CreateElement("StartDate", ""));
		}

		public StartDateType GetStartDateAt(int index)
		{
			return new StartDateType(GetDomChildAt(NodeType.Element, "", "StartDate", index));
		}

		public XmlNode GetStartingStartDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "StartDate" );
		}

		public XmlNode GetAdvancedStartDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "StartDate", curNode );
		}

		public StartDateType GetStartDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StartDateType( curNode );
		}


		public StartDateType GetStartDate()
		{
			return GetStartDateAt(0);
		}

		public StartDateType StartDate
		{
			get
			{
				return GetStartDateAt(0);
			}
		}

		public void RemoveStartDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "StartDate", index);
		}

		public void RemoveStartDate()
		{
			while (HasStartDate())
				RemoveStartDateAt(0);
		}

		public void AddStartDate(StartDateType newValue)
		{
			AppendDomElement("", "StartDate", newValue);
		}

		public void InsertStartDateAt(StartDateType newValue, int index)
		{
			InsertDomElementAt("", "StartDate", index, newValue);
		}

		public void ReplaceStartDateAt(StartDateType newValue, int index)
		{
			ReplaceDomElementAt("", "StartDate", index, newValue);
		}
		#endregion // StartDate accessor methods

		#region StartDate collection
        public StartDateCollection	MyStartDates = new StartDateCollection( );

        public class StartDateCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public StartDateEnumerator GetEnumerator() 
			{
				return new StartDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StartDateEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public StartDateEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StartDateCount );
			}
			public StartDateType  Current 
			{
				get 
				{
					return(parent.GetStartDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StartDate collection

		#region FinishDate accessor methods
		public static int GetFinishDateMinCount()
		{
			return 1;
		}

		public static int FinishDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetFinishDateMaxCount()
		{
			return 1;
		}

		public static int FinishDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFinishDateCount()
		{
			return DomChildCount(NodeType.Element, "", "FinishDate");
		}

		public int FinishDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "FinishDate");
			}
		}

		public bool HasFinishDate()
		{
			return HasDomChild(NodeType.Element, "", "FinishDate");
		}

		public FinishDateType NewFinishDate()
		{
			return new FinishDateType(domNode.OwnerDocument.CreateElement("FinishDate", ""));
		}

		public FinishDateType GetFinishDateAt(int index)
		{
			return new FinishDateType(GetDomChildAt(NodeType.Element, "", "FinishDate", index));
		}

		public XmlNode GetStartingFinishDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "FinishDate" );
		}

		public XmlNode GetAdvancedFinishDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "FinishDate", curNode );
		}

		public FinishDateType GetFinishDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new FinishDateType( curNode );
		}


		public FinishDateType GetFinishDate()
		{
			return GetFinishDateAt(0);
		}

		public FinishDateType FinishDate
		{
			get
			{
				return GetFinishDateAt(0);
			}
		}

		public void RemoveFinishDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "FinishDate", index);
		}

		public void RemoveFinishDate()
		{
			while (HasFinishDate())
				RemoveFinishDateAt(0);
		}

		public void AddFinishDate(FinishDateType newValue)
		{
			AppendDomElement("", "FinishDate", newValue);
		}

		public void InsertFinishDateAt(FinishDateType newValue, int index)
		{
			InsertDomElementAt("", "FinishDate", index, newValue);
		}

		public void ReplaceFinishDateAt(FinishDateType newValue, int index)
		{
			ReplaceDomElementAt("", "FinishDate", index, newValue);
		}
		#endregion // FinishDate accessor methods

		#region FinishDate collection
        public FinishDateCollection	MyFinishDates = new FinishDateCollection( );

        public class FinishDateCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public FinishDateEnumerator GetEnumerator() 
			{
				return new FinishDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FinishDateEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public FinishDateEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FinishDateCount );
			}
			public FinishDateType  Current 
			{
				get 
				{
					return(parent.GetFinishDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // FinishDate collection

		#region WebURL accessor methods
		public static int GetWebURLMinCount()
		{
			return 1;
		}

		public static int WebURLMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetWebURLMaxCount()
		{
			return 1;
		}

		public static int WebURLMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetWebURLCount()
		{
			return DomChildCount(NodeType.Element, "", "WebURL");
		}

		public int WebURLCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "WebURL");
			}
		}

		public bool HasWebURL()
		{
			return HasDomChild(NodeType.Element, "", "WebURL");
		}

		public WebURLType NewWebURL()
		{
			return new WebURLType();
		}

		public WebURLType GetWebURLAt(int index)
		{
			return new WebURLType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "WebURL", index)));
		}

		public XmlNode GetStartingWebURLCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "WebURL" );
		}

		public XmlNode GetAdvancedWebURLCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "WebURL", curNode );
		}

		public WebURLType GetWebURLValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new WebURLType( curNode.InnerText );
		}


		public WebURLType GetWebURL()
		{
			return GetWebURLAt(0);
		}

		public WebURLType WebURL
		{
			get
			{
				return GetWebURLAt(0);
			}
		}

		public void RemoveWebURLAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "WebURL", index);
		}

		public void RemoveWebURL()
		{
			while (HasWebURL())
				RemoveWebURLAt(0);
		}

		public void AddWebURL(WebURLType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "WebURL", newValue.ToString());
		}

		public void InsertWebURLAt(WebURLType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "WebURL", index, newValue.ToString());
		}

		public void ReplaceWebURLAt(WebURLType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "WebURL", index, newValue.ToString());
		}
		#endregion // WebURL accessor methods

		#region WebURL collection
        public WebURLCollection	MyWebURLs = new WebURLCollection( );

        public class WebURLCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public WebURLEnumerator GetEnumerator() 
			{
				return new WebURLEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class WebURLEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public WebURLEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.WebURLCount );
			}
			public WebURLType  Current 
			{
				get 
				{
					return(parent.GetWebURLAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // WebURL collection

		#region Comment accessor methods
		public static int GetCommentMinCount()
		{
			return 1;
		}

		public static int CommentMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCommentMaxCount()
		{
			return 1;
		}

		public static int CommentMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCommentCount()
		{
			return DomChildCount(NodeType.Element, "", "Comment");
		}

		public int CommentCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Comment");
			}
		}

		public bool HasComment()
		{
			return HasDomChild(NodeType.Element, "", "Comment");
		}

		public CommentType NewComment()
		{
			return new CommentType(domNode.OwnerDocument.CreateElement("Comment", ""));
		}

		public CommentType GetCommentAt(int index)
		{
			return new CommentType(GetDomChildAt(NodeType.Element, "", "Comment", index));
		}

		public XmlNode GetStartingCommentCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Comment" );
		}

		public XmlNode GetAdvancedCommentCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Comment", curNode );
		}

		public CommentType GetCommentValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CommentType( curNode );
		}


		public CommentType GetComment()
		{
			return GetCommentAt(0);
		}

		public CommentType Comment
		{
			get
			{
				return GetCommentAt(0);
			}
		}

		public void RemoveCommentAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Comment", index);
		}

		public void RemoveComment()
		{
			while (HasComment())
				RemoveCommentAt(0);
		}

		public void AddComment(CommentType newValue)
		{
			AppendDomElement("", "Comment", newValue);
		}

		public void InsertCommentAt(CommentType newValue, int index)
		{
			InsertDomElementAt("", "Comment", index, newValue);
		}

		public void ReplaceCommentAt(CommentType newValue, int index)
		{
			ReplaceDomElementAt("", "Comment", index, newValue);
		}
		#endregion // Comment accessor methods

		#region Comment collection
        public CommentCollection	MyComments = new CommentCollection( );

        public class CommentCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CommentEnumerator GetEnumerator() 
			{
				return new CommentEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CommentEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public CommentEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CommentCount );
			}
			public CommentType  Current 
			{
				get 
				{
					return(parent.GetCommentAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Comment collection

		#region PunchingUnitType accessor methods
		public static int GetPunchingUnitTypeMinCount()
		{
			return 1;
		}

		public static int PunchingUnitTypeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPunchingUnitTypeMaxCount()
		{
			return 1;
		}

		public static int PunchingUnitTypeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPunchingUnitTypeCount()
		{
			return DomChildCount(NodeType.Element, "", "PunchingUnitType");
		}

		public int PunchingUnitTypeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "PunchingUnitType");
			}
		}

		public bool HasPunchingUnitType()
		{
			return HasDomChild(NodeType.Element, "", "PunchingUnitType");
		}

		public PunchingUnitTypeType NewPunchingUnitType()
		{
			return new PunchingUnitTypeType(domNode.OwnerDocument.CreateElement("PunchingUnitType", ""));
		}

		public PunchingUnitTypeType GetPunchingUnitTypeAt(int index)
		{
			return new PunchingUnitTypeType(GetDomChildAt(NodeType.Element, "", "PunchingUnitType", index));
		}

		public XmlNode GetStartingPunchingUnitTypeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "PunchingUnitType" );
		}

		public XmlNode GetAdvancedPunchingUnitTypeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "PunchingUnitType", curNode );
		}

		public PunchingUnitTypeType GetPunchingUnitTypeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PunchingUnitTypeType( curNode );
		}


		public PunchingUnitTypeType GetPunchingUnitType()
		{
			return GetPunchingUnitTypeAt(0);
		}

		public PunchingUnitTypeType PunchingUnitType
		{
			get
			{
				return GetPunchingUnitTypeAt(0);
			}
		}

		public void RemovePunchingUnitTypeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "PunchingUnitType", index);
		}

		public void RemovePunchingUnitType()
		{
			while (HasPunchingUnitType())
				RemovePunchingUnitTypeAt(0);
		}

		public void AddPunchingUnitType(PunchingUnitTypeType newValue)
		{
			AppendDomElement("", "PunchingUnitType", newValue);
		}

		public void InsertPunchingUnitTypeAt(PunchingUnitTypeType newValue, int index)
		{
			InsertDomElementAt("", "PunchingUnitType", index, newValue);
		}

		public void ReplacePunchingUnitTypeAt(PunchingUnitTypeType newValue, int index)
		{
			ReplaceDomElementAt("", "PunchingUnitType", index, newValue);
		}
		#endregion // PunchingUnitType accessor methods

		#region PunchingUnitType collection
        public PunchingUnitTypeCollection	MyPunchingUnitTypes = new PunchingUnitTypeCollection( );

        public class PunchingUnitTypeCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PunchingUnitTypeEnumerator GetEnumerator() 
			{
				return new PunchingUnitTypeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PunchingUnitTypeEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public PunchingUnitTypeEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PunchingUnitTypeCount );
			}
			public PunchingUnitTypeType  Current 
			{
				get 
				{
					return(parent.GetPunchingUnitTypeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PunchingUnitType collection

		#region ModifyDate accessor methods
		public static int GetModifyDateMinCount()
		{
			return 1;
		}

		public static int ModifyDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetModifyDateMaxCount()
		{
			return 1;
		}

		public static int ModifyDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetModifyDateCount()
		{
			return DomChildCount(NodeType.Element, "", "ModifyDate");
		}

		public int ModifyDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ModifyDate");
			}
		}

		public bool HasModifyDate()
		{
			return HasDomChild(NodeType.Element, "", "ModifyDate");
		}

		public ModifyDateType NewModifyDate()
		{
			return new ModifyDateType(domNode.OwnerDocument.CreateElement("ModifyDate", ""));
		}

		public ModifyDateType GetModifyDateAt(int index)
		{
			return new ModifyDateType(GetDomChildAt(NodeType.Element, "", "ModifyDate", index));
		}

		public XmlNode GetStartingModifyDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ModifyDate" );
		}

		public XmlNode GetAdvancedModifyDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ModifyDate", curNode );
		}

		public ModifyDateType GetModifyDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ModifyDateType( curNode );
		}


		public ModifyDateType GetModifyDate()
		{
			return GetModifyDateAt(0);
		}

		public ModifyDateType ModifyDate
		{
			get
			{
				return GetModifyDateAt(0);
			}
		}

		public void RemoveModifyDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ModifyDate", index);
		}

		public void RemoveModifyDate()
		{
			while (HasModifyDate())
				RemoveModifyDateAt(0);
		}

		public void AddModifyDate(ModifyDateType newValue)
		{
			AppendDomElement("", "ModifyDate", newValue);
		}

		public void InsertModifyDateAt(ModifyDateType newValue, int index)
		{
			InsertDomElementAt("", "ModifyDate", index, newValue);
		}

		public void ReplaceModifyDateAt(ModifyDateType newValue, int index)
		{
			ReplaceDomElementAt("", "ModifyDate", index, newValue);
		}
		#endregion // ModifyDate accessor methods

		#region ModifyDate collection
        public ModifyDateCollection	MyModifyDates = new ModifyDateCollection( );

        public class ModifyDateCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ModifyDateEnumerator GetEnumerator() 
			{
				return new ModifyDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ModifyDateEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public ModifyDateEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ModifyDateCount );
			}
			public ModifyDateType  Current 
			{
				get 
				{
					return(parent.GetModifyDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ModifyDate collection

		#region ModifiedBy accessor methods
		public static int GetModifiedByMinCount()
		{
			return 1;
		}

		public static int ModifiedByMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetModifiedByMaxCount()
		{
			return 1;
		}

		public static int ModifiedByMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetModifiedByCount()
		{
			return DomChildCount(NodeType.Element, "", "ModifiedBy");
		}

		public int ModifiedByCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ModifiedBy");
			}
		}

		public bool HasModifiedBy()
		{
			return HasDomChild(NodeType.Element, "", "ModifiedBy");
		}

		public ModifiedByType NewModifiedBy()
		{
			return new ModifiedByType(domNode.OwnerDocument.CreateElement("ModifiedBy", ""));
		}

		public ModifiedByType GetModifiedByAt(int index)
		{
			return new ModifiedByType(GetDomChildAt(NodeType.Element, "", "ModifiedBy", index));
		}

		public XmlNode GetStartingModifiedByCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ModifiedBy" );
		}

		public XmlNode GetAdvancedModifiedByCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ModifiedBy", curNode );
		}

		public ModifiedByType GetModifiedByValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ModifiedByType( curNode );
		}


		public ModifiedByType GetModifiedBy()
		{
			return GetModifiedByAt(0);
		}

		public ModifiedByType ModifiedBy
		{
			get
			{
				return GetModifiedByAt(0);
			}
		}

		public void RemoveModifiedByAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ModifiedBy", index);
		}

		public void RemoveModifiedBy()
		{
			while (HasModifiedBy())
				RemoveModifiedByAt(0);
		}

		public void AddModifiedBy(ModifiedByType newValue)
		{
			AppendDomElement("", "ModifiedBy", newValue);
		}

		public void InsertModifiedByAt(ModifiedByType newValue, int index)
		{
			InsertDomElementAt("", "ModifiedBy", index, newValue);
		}

		public void ReplaceModifiedByAt(ModifiedByType newValue, int index)
		{
			ReplaceDomElementAt("", "ModifiedBy", index, newValue);
		}
		#endregion // ModifiedBy accessor methods

		#region ModifiedBy collection
        public ModifiedByCollection	MyModifiedBys = new ModifiedByCollection( );

        public class ModifiedByCollection: IEnumerable
        {
            EventType parent;
            public EventType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ModifiedByEnumerator GetEnumerator() 
			{
				return new ModifiedByEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ModifiedByEnumerator: IEnumerator 
        {
			int nIndex;
			EventType parent;
			public ModifiedByEnumerator(EventType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ModifiedByCount );
			}
			public ModifiedByType  Current 
			{
				get 
				{
					return(parent.GetModifiedByAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ModifiedBy collection

        private void SetCollectionParents()
        {
            MyeventForms.Parent = this; 
            MyEventIds.Parent = this; 
            MyNames.Parent = this; 
            MyEventClassificationIds.Parent = this; 
            MyEventStatusIds.Parent = this; 
            MyStartDates.Parent = this; 
            MyFinishDates.Parent = this; 
            MyWebURLs.Parent = this; 
            MyComments.Parent = this; 
            MyPunchingUnitTypes.Parent = this; 
            MyModifyDates.Parent = this; 
            MyModifiedBys.Parent = this; 
	}
}
}
