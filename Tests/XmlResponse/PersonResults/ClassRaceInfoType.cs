//
// ClassRaceInfoType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class ClassRaceInfoType : Altova.Xml.Node
	{
		#region Forward constructors

		public ClassRaceInfoType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ClassRaceInfoType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ClassRaceInfoType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ClassRaceInfoType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "noOfEntries" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "noOfEntries", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "noOfStarts" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "noOfStarts", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EventRaceId" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EventRaceId", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}



		#region noOfEntries accessor methods
		public static int GetnoOfEntriesMinCount()
		{
			return 0;
		}

		public static int noOfEntriesMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetnoOfEntriesMaxCount()
		{
			return 1;
		}

		public static int noOfEntriesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnoOfEntriesCount()
		{
			return DomChildCount(NodeType.Attribute, "", "noOfEntries");
		}

		public int noOfEntriesCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "noOfEntries");
			}
		}

		public bool HasnoOfEntries()
		{
			return HasDomChild(NodeType.Attribute, "", "noOfEntries");
		}

		public noOfEntriesType NewnoOfEntries()
		{
			return new noOfEntriesType();
		}

		public noOfEntriesType GetnoOfEntriesAt(int index)
		{
			return new noOfEntriesType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "noOfEntries", index)));
		}

		public XmlNode GetStartingnoOfEntriesCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "noOfEntries" );
		}

		public XmlNode GetAdvancednoOfEntriesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "noOfEntries", curNode );
		}

		public noOfEntriesType GetnoOfEntriesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new noOfEntriesType( curNode.Value );
		}


		public noOfEntriesType GetnoOfEntries()
		{
			return GetnoOfEntriesAt(0);
		}

		public noOfEntriesType noOfEntries
		{
			get
			{
				return GetnoOfEntriesAt(0);
			}
		}

		public void RemovenoOfEntriesAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "noOfEntries", index);
		}

		public void RemovenoOfEntries()
		{
			while (HasnoOfEntries())
				RemovenoOfEntriesAt(0);
		}

		public void AddnoOfEntries(noOfEntriesType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "noOfEntries", newValue.ToString());
		}

		public void InsertnoOfEntriesAt(noOfEntriesType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "noOfEntries", index, newValue.ToString());
		}

		public void ReplacenoOfEntriesAt(noOfEntriesType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "noOfEntries", index, newValue.ToString());
		}
		#endregion // noOfEntries accessor methods

		#region noOfEntries collection
        public noOfEntriesCollection	MynoOfEntriess = new noOfEntriesCollection( );

        public class noOfEntriesCollection: IEnumerable
        {
            ClassRaceInfoType parent;
            public ClassRaceInfoType Parent
			{
				set
				{
					parent = value;
				}
			}
			public noOfEntriesEnumerator GetEnumerator() 
			{
				return new noOfEntriesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class noOfEntriesEnumerator: IEnumerator 
        {
			int nIndex;
			ClassRaceInfoType parent;
			public noOfEntriesEnumerator(ClassRaceInfoType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.noOfEntriesCount );
			}
			public noOfEntriesType  Current 
			{
				get 
				{
					return(parent.GetnoOfEntriesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // noOfEntries collection

		#region noOfStarts accessor methods
		public static int GetnoOfStartsMinCount()
		{
			return 0;
		}

		public static int noOfStartsMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetnoOfStartsMaxCount()
		{
			return 1;
		}

		public static int noOfStartsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnoOfStartsCount()
		{
			return DomChildCount(NodeType.Attribute, "", "noOfStarts");
		}

		public int noOfStartsCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "noOfStarts");
			}
		}

		public bool HasnoOfStarts()
		{
			return HasDomChild(NodeType.Attribute, "", "noOfStarts");
		}

		public noOfStartsType NewnoOfStarts()
		{
			return new noOfStartsType();
		}

		public noOfStartsType GetnoOfStartsAt(int index)
		{
			return new noOfStartsType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "noOfStarts", index)));
		}

		public XmlNode GetStartingnoOfStartsCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "noOfStarts" );
		}

		public XmlNode GetAdvancednoOfStartsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "noOfStarts", curNode );
		}

		public noOfStartsType GetnoOfStartsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new noOfStartsType( curNode.Value );
		}


		public noOfStartsType GetnoOfStarts()
		{
			return GetnoOfStartsAt(0);
		}

		public noOfStartsType noOfStarts
		{
			get
			{
				return GetnoOfStartsAt(0);
			}
		}

		public void RemovenoOfStartsAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "noOfStarts", index);
		}

		public void RemovenoOfStarts()
		{
			while (HasnoOfStarts())
				RemovenoOfStartsAt(0);
		}

		public void AddnoOfStarts(noOfStartsType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "noOfStarts", newValue.ToString());
		}

		public void InsertnoOfStartsAt(noOfStartsType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "noOfStarts", index, newValue.ToString());
		}

		public void ReplacenoOfStartsAt(noOfStartsType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "noOfStarts", index, newValue.ToString());
		}
		#endregion // noOfStarts accessor methods

		#region noOfStarts collection
        public noOfStartsCollection	MynoOfStartss = new noOfStartsCollection( );

        public class noOfStartsCollection: IEnumerable
        {
            ClassRaceInfoType parent;
            public ClassRaceInfoType Parent
			{
				set
				{
					parent = value;
				}
			}
			public noOfStartsEnumerator GetEnumerator() 
			{
				return new noOfStartsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class noOfStartsEnumerator: IEnumerator 
        {
			int nIndex;
			ClassRaceInfoType parent;
			public noOfStartsEnumerator(ClassRaceInfoType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.noOfStartsCount );
			}
			public noOfStartsType  Current 
			{
				get 
				{
					return(parent.GetnoOfStartsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // noOfStarts collection

		#region EventRaceId accessor methods
		public static int GetEventRaceIdMinCount()
		{
			return 1;
		}

		public static int EventRaceIdMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEventRaceIdMaxCount()
		{
			return 1;
		}

		public static int EventRaceIdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEventRaceIdCount()
		{
			return DomChildCount(NodeType.Element, "", "EventRaceId");
		}

		public int EventRaceIdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EventRaceId");
			}
		}

		public bool HasEventRaceId()
		{
			return HasDomChild(NodeType.Element, "", "EventRaceId");
		}

		public EventRaceIdType NewEventRaceId()
		{
			return new EventRaceIdType();
		}

		public EventRaceIdType GetEventRaceIdAt(int index)
		{
			return new EventRaceIdType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "EventRaceId", index)));
		}

		public XmlNode GetStartingEventRaceIdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EventRaceId" );
		}

		public XmlNode GetAdvancedEventRaceIdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EventRaceId", curNode );
		}

		public EventRaceIdType GetEventRaceIdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EventRaceIdType( curNode.InnerText );
		}


		public EventRaceIdType GetEventRaceId()
		{
			return GetEventRaceIdAt(0);
		}

		public EventRaceIdType EventRaceId
		{
			get
			{
				return GetEventRaceIdAt(0);
			}
		}

		public void RemoveEventRaceIdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EventRaceId", index);
		}

		public void RemoveEventRaceId()
		{
			while (HasEventRaceId())
				RemoveEventRaceIdAt(0);
		}

		public void AddEventRaceId(EventRaceIdType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "EventRaceId", newValue.ToString());
		}

		public void InsertEventRaceIdAt(EventRaceIdType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "EventRaceId", index, newValue.ToString());
		}

		public void ReplaceEventRaceIdAt(EventRaceIdType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "EventRaceId", index, newValue.ToString());
		}
		#endregion // EventRaceId accessor methods

		#region EventRaceId collection
        public EventRaceIdCollection	MyEventRaceIds = new EventRaceIdCollection( );

        public class EventRaceIdCollection: IEnumerable
        {
            ClassRaceInfoType parent;
            public ClassRaceInfoType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EventRaceIdEnumerator GetEnumerator() 
			{
				return new EventRaceIdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EventRaceIdEnumerator: IEnumerator 
        {
			int nIndex;
			ClassRaceInfoType parent;
			public EventRaceIdEnumerator(ClassRaceInfoType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EventRaceIdCount );
			}
			public EventRaceIdType  Current 
			{
				get 
				{
					return(parent.GetEventRaceIdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EventRaceId collection

        private void SetCollectionParents()
        {
            MynoOfEntriess.Parent = this; 
            MynoOfStartss.Parent = this; 
            MyEventRaceIds.Parent = this; 
	}
}
}
