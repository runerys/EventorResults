//
// ResultListListType.cs
//
// This file was generated by XMLSpy 2006sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace PersonResults
{
	public class ResultListListType : Altova.Xml.Node
	{
		#region Forward constructors

		public ResultListListType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ResultListListType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ResultListListType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ResultListListType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ResultList" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ResultList", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ResultListType(DOMNode).AdjustPrefix();
			}
		}



		#region ResultList accessor methods
		public static int GetResultListMinCount()
		{
			return 1;
		}

		public static int ResultListMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetResultListMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int ResultListMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetResultListCount()
		{
			return DomChildCount(NodeType.Element, "", "ResultList");
		}

		public int ResultListCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ResultList");
			}
		}

		public bool HasResultList()
		{
			return HasDomChild(NodeType.Element, "", "ResultList");
		}

		public ResultListType NewResultList()
		{
			return new ResultListType(domNode.OwnerDocument.CreateElement("ResultList", ""));
		}

		public ResultListType GetResultListAt(int index)
		{
			return new ResultListType(GetDomChildAt(NodeType.Element, "", "ResultList", index));
		}

		public XmlNode GetStartingResultListCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ResultList" );
		}

		public XmlNode GetAdvancedResultListCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ResultList", curNode );
		}

		public ResultListType GetResultListValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ResultListType( curNode );
		}


		public ResultListType GetResultList()
		{
			return GetResultListAt(0);
		}

		public ResultListType ResultList
		{
			get
			{
				return GetResultListAt(0);
			}
		}

		public void RemoveResultListAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ResultList", index);
		}

		public void RemoveResultList()
		{
			while (HasResultList())
				RemoveResultListAt(0);
		}

		public void AddResultList(ResultListType newValue)
		{
			AppendDomElement("", "ResultList", newValue);
		}

		public void InsertResultListAt(ResultListType newValue, int index)
		{
			InsertDomElementAt("", "ResultList", index, newValue);
		}

		public void ReplaceResultListAt(ResultListType newValue, int index)
		{
			ReplaceDomElementAt("", "ResultList", index, newValue);
		}
		#endregion // ResultList accessor methods

		#region ResultList collection
        public ResultListCollection	MyResultLists = new ResultListCollection( );

        public class ResultListCollection: IEnumerable
        {
            ResultListListType parent;
            public ResultListListType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ResultListEnumerator GetEnumerator() 
			{
				return new ResultListEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ResultListEnumerator: IEnumerator 
        {
			int nIndex;
			ResultListListType parent;
			public ResultListEnumerator(ResultListListType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ResultListCount );
			}
			public ResultListType  Current 
			{
				get 
				{
					return(parent.GetResultListAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ResultList collection

        private void SetCollectionParents()
        {
            MyResultLists.Parent = this; 
	}
}
}
